<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache   
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd"
       default-autowire="byName" default-lazy-init="true">

    <context:property-placeholder location="classpath:spring.properties,classpath:spring-m.properties"
                                  ignore-unresolvable="true" order="-2"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">

        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_user}"/>
        <property name="password" value="${jdbc_password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="3000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 Oracle/DB2/SQL Server -->
        <!-- <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
        <property name="poolPreparedStatements" value="false"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="domain"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="persistence"/>
        <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory"/>
    </bean>

    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean id="cacheManager"
          class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
        <property name="transactionAware" value="true"/>
    </bean>

    <!-- EhCache library setup -->
    <bean id="ehcacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache.xml"/>

    <import resource="classpath:spring-freemarker.xml"/>

    <context:component-scan base-package="service,sys.service">
        <context:exclude-filter type="regex" expression="service.member.*"/>
        <context:exclude-filter type="regex" expression="service.modify.*"/>
        <context:exclude-filter type="regex" expression="service.cis.*"/>
        <context:exclude-filter type="regex" expression="service.crs.*"/>
        <context:exclude-filter type="regex" expression="service.train.*"/>
        <context:exclude-filter type="regex" expression="service.abroad.*"/>
        <context:exclude-filter type="regex" expression="service.pcs.*"/>
        <context:exclude-filter type="regex" expression="service.oa.*"/>
        <context:exclude-filter type="regex" expression="service.pmd.*"/>
        <context:exclude-filter type="regex" expression="service.sc.scMatter.*"/>
        <context:exclude-filter type="regex" expression="service.sc.scLetter.*"/>
        <!--
        <context:exclude-filter type="regex" expression="service.sc.scGroup.*"/>
        <context:exclude-filter type="regex" expression="service.sc.scCommittee.*"/>
        <context:exclude-filter type="regex" expression="service.sc.scPublic.*"/>
        <context:exclude-filter type="regex" expression="service.sc.scDispatch.*"/>
        -->
    </context:component-scan>
    <!--<context:annotation-config />-->

    <!-- quartz的定时任务的factorybean,配置其他config -->
    <bean id="jobFactory" class="sys.quartz.JobFactory"></bean>
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" autowire="no">
        <property name="jobFactory" ref="jobFactory"></property>
    </bean>

    <!-- 缺省的异步任务线程池 -->
    <task:annotation-driven executor="asyncExecutor" />
    <task:executor id="asyncExecutor" pool-size="100-10000" queue-capacity="10" />

    <!--<task:executor id="executor" pool-size="5"/>
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven executor="executor" scheduler="scheduler"/>-->

    <bean id="loginService" class="${login.service}"></bean>
    <import resource="classpath:spring-shiro.xml"/>
</beans>