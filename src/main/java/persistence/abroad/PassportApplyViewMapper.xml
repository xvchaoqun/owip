<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.abroad.PassportApplyViewMapper" >
  <resultMap id="BaseResultMap" type="domain.abroad.PassportApplyView" >
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="cadre_id" property="cadreId" jdbcType="INTEGER" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="apply_date" property="applyDate" jdbcType="DATE" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="abolish" property="abolish" jdbcType="BIT" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="approve_time" property="approveTime" jdbcType="TIMESTAMP" />
    <result column="expect_date" property="expectDate" jdbcType="DATE" />
    <result column="handle_date" property="handleDate" jdbcType="DATE" />
    <result column="handle_user_id" property="handleUserId" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="passport_id" property="passportId" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, cadre_id, class_id, apply_date, status, abolish, user_id, approve_time, expect_date, 
    handle_date, handle_user_id, remark, create_time, ip, passport_id, code
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="domain.abroad.PassportApplyViewExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport_apply_view
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="domain.abroad.PassportApplyViewExample" >
    delete from abroad_passport_apply_view
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.abroad.PassportApplyView" >
    insert into abroad_passport_apply_view (id, cadre_id, class_id, 
      apply_date, status, abolish, 
      user_id, approve_time, expect_date, 
      handle_date, handle_user_id, remark, 
      create_time, ip, passport_id, 
      code)
    values (#{id,jdbcType=INTEGER}, #{cadreId,jdbcType=INTEGER}, #{classId,jdbcType=INTEGER}, 
      #{applyDate,jdbcType=DATE}, #{status,jdbcType=TINYINT}, #{abolish,jdbcType=BIT}, 
      #{userId,jdbcType=INTEGER}, #{approveTime,jdbcType=TIMESTAMP}, #{expectDate,jdbcType=DATE}, 
      #{handleDate,jdbcType=DATE}, #{handleUserId,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{ip,jdbcType=VARCHAR}, #{passportId,jdbcType=INTEGER}, 
      #{code,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="domain.abroad.PassportApplyView" >
    insert into abroad_passport_apply_view
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="cadreId != null" >
        cadre_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="applyDate != null" >
        apply_date,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="abolish != null" >
        abolish,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="approveTime != null" >
        approve_time,
      </if>
      <if test="expectDate != null" >
        expect_date,
      </if>
      <if test="handleDate != null" >
        handle_date,
      </if>
      <if test="handleUserId != null" >
        handle_user_id,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="passportId != null" >
        passport_id,
      </if>
      <if test="code != null" >
        code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="applyDate != null" >
        #{applyDate,jdbcType=DATE},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="abolish != null" >
        #{abolish,jdbcType=BIT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="approveTime != null" >
        #{approveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expectDate != null" >
        #{expectDate,jdbcType=DATE},
      </if>
      <if test="handleDate != null" >
        #{handleDate,jdbcType=DATE},
      </if>
      <if test="handleUserId != null" >
        #{handleUserId,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="passportId != null" >
        #{passportId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.abroad.PassportApplyViewExample" resultType="java.lang.Integer" >
    select count(*) from abroad_passport_apply_view
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update abroad_passport_apply_view
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null" >
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.classId != null" >
        class_id = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.applyDate != null" >
        apply_date = #{record.applyDate,jdbcType=DATE},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.abolish != null" >
        abolish = #{record.abolish,jdbcType=BIT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.approveTime != null" >
        approve_time = #{record.approveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expectDate != null" >
        expect_date = #{record.expectDate,jdbcType=DATE},
      </if>
      <if test="record.handleDate != null" >
        handle_date = #{record.handleDate,jdbcType=DATE},
      </if>
      <if test="record.handleUserId != null" >
        handle_user_id = #{record.handleUserId,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ip != null" >
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.passportId != null" >
        passport_id = #{record.passportId,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update abroad_passport_apply_view
    set id = #{record.id,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      class_id = #{record.classId,jdbcType=INTEGER},
      apply_date = #{record.applyDate,jdbcType=DATE},
      status = #{record.status,jdbcType=TINYINT},
      abolish = #{record.abolish,jdbcType=BIT},
      user_id = #{record.userId,jdbcType=INTEGER},
      approve_time = #{record.approveTime,jdbcType=TIMESTAMP},
      expect_date = #{record.expectDate,jdbcType=DATE},
      handle_date = #{record.handleDate,jdbcType=DATE},
      handle_user_id = #{record.handleUserId,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      ip = #{record.ip,jdbcType=VARCHAR},
      passport_id = #{record.passportId,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select resultMap="BaseResultMap" parameterType="domain.abroad.PassportApplyViewExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport_apply_view
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>