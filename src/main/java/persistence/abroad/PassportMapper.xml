<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.abroad.PassportMapper" >
  <resultMap id="BaseResultMap" type="domain.abroad.Passport" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="apply_id" property="applyId" jdbcType="INTEGER" />
    <result column="cadre_id" property="cadreId" jdbcType="INTEGER" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="authority" property="authority" jdbcType="VARCHAR" />
    <result column="issue_date" property="issueDate" jdbcType="DATE" />
    <result column="expiry_date" property="expiryDate" jdbcType="DATE" />
    <result column="keep_date" property="keepDate" jdbcType="DATE" />
    <result column="safe_box_id" property="safeBoxId" jdbcType="INTEGER" />
    <result column="is_lent" property="isLent" jdbcType="BIT" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="cancel_type" property="cancelType" jdbcType="TINYINT" />
    <result column="cancel_type_other" property="cancelTypeOther" jdbcType="VARCHAR" />
    <result column="cancel_confirm" property="cancelConfirm" jdbcType="BIT" />
    <result column="cancel_pic" property="cancelPic" jdbcType="VARCHAR" />
    <result column="cancel_time" property="cancelTime" jdbcType="DATE" />
    <result column="cancel_user_id" property="cancelUserId" jdbcType="INTEGER" />
    <result column="cancel_remark" property="cancelRemark" jdbcType="VARCHAR" />
    <result column="lost_type" property="lostType" jdbcType="TINYINT" />
    <result column="lost_time" property="lostTime" jdbcType="DATE" />
    <result column="lost_proof" property="lostProof" jdbcType="VARCHAR" />
    <result column="lost_user_id" property="lostUserId" jdbcType="INTEGER" />
    <result column="has_find" property="hasFind" jdbcType="BIT" />
    <result column="find_time" property="findTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, apply_id, cadre_id, class_id, code, authority, issue_date, expiry_date, keep_date, 
    safe_box_id, is_lent, type, cancel_type, cancel_type_other, cancel_confirm, cancel_pic, 
    cancel_time, cancel_user_id, cancel_remark, lost_type, lost_time, lost_proof, lost_user_id, 
    has_find, find_time, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="domain.abroad.PassportExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from abroad_passport
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from abroad_passport
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.abroad.PassportExample" >
    delete from abroad_passport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.abroad.Passport" >
    insert into abroad_passport (id, apply_id, cadre_id, 
      class_id, code, authority, 
      issue_date, expiry_date, keep_date, 
      safe_box_id, is_lent, type, 
      cancel_type, cancel_type_other, cancel_confirm, 
      cancel_pic, cancel_time, cancel_user_id, 
      cancel_remark, lost_type, lost_time, 
      lost_proof, lost_user_id, has_find, 
      find_time, create_time)
    values (#{id,jdbcType=INTEGER}, #{applyId,jdbcType=INTEGER}, #{cadreId,jdbcType=INTEGER}, 
      #{classId,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{authority,jdbcType=VARCHAR}, 
      #{issueDate,jdbcType=DATE}, #{expiryDate,jdbcType=DATE}, #{keepDate,jdbcType=DATE}, 
      #{safeBoxId,jdbcType=INTEGER}, #{isLent,jdbcType=BIT}, #{type,jdbcType=TINYINT}, 
      #{cancelType,jdbcType=TINYINT}, #{cancelTypeOther,jdbcType=VARCHAR}, #{cancelConfirm,jdbcType=BIT}, 
      #{cancelPic,jdbcType=VARCHAR}, #{cancelTime,jdbcType=DATE}, #{cancelUserId,jdbcType=INTEGER}, 
      #{cancelRemark,jdbcType=VARCHAR}, #{lostType,jdbcType=TINYINT}, #{lostTime,jdbcType=DATE}, 
      #{lostProof,jdbcType=VARCHAR}, #{lostUserId,jdbcType=INTEGER}, #{hasFind,jdbcType=BIT}, 
      #{findTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="domain.abroad.Passport" >
    insert into abroad_passport
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="applyId != null" >
        apply_id,
      </if>
      <if test="cadreId != null" >
        cadre_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="authority != null" >
        authority,
      </if>
      <if test="issueDate != null" >
        issue_date,
      </if>
      <if test="expiryDate != null" >
        expiry_date,
      </if>
      <if test="keepDate != null" >
        keep_date,
      </if>
      <if test="safeBoxId != null" >
        safe_box_id,
      </if>
      <if test="isLent != null" >
        is_lent,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="cancelType != null" >
        cancel_type,
      </if>
      <if test="cancelTypeOther != null" >
        cancel_type_other,
      </if>
      <if test="cancelConfirm != null" >
        cancel_confirm,
      </if>
      <if test="cancelPic != null" >
        cancel_pic,
      </if>
      <if test="cancelTime != null" >
        cancel_time,
      </if>
      <if test="cancelUserId != null" >
        cancel_user_id,
      </if>
      <if test="cancelRemark != null" >
        cancel_remark,
      </if>
      <if test="lostType != null" >
        lost_type,
      </if>
      <if test="lostTime != null" >
        lost_time,
      </if>
      <if test="lostProof != null" >
        lost_proof,
      </if>
      <if test="lostUserId != null" >
        lost_user_id,
      </if>
      <if test="hasFind != null" >
        has_find,
      </if>
      <if test="findTime != null" >
        find_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="applyId != null" >
        #{applyId,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="authority != null" >
        #{authority,jdbcType=VARCHAR},
      </if>
      <if test="issueDate != null" >
        #{issueDate,jdbcType=DATE},
      </if>
      <if test="expiryDate != null" >
        #{expiryDate,jdbcType=DATE},
      </if>
      <if test="keepDate != null" >
        #{keepDate,jdbcType=DATE},
      </if>
      <if test="safeBoxId != null" >
        #{safeBoxId,jdbcType=INTEGER},
      </if>
      <if test="isLent != null" >
        #{isLent,jdbcType=BIT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="cancelType != null" >
        #{cancelType,jdbcType=TINYINT},
      </if>
      <if test="cancelTypeOther != null" >
        #{cancelTypeOther,jdbcType=VARCHAR},
      </if>
      <if test="cancelConfirm != null" >
        #{cancelConfirm,jdbcType=BIT},
      </if>
      <if test="cancelPic != null" >
        #{cancelPic,jdbcType=VARCHAR},
      </if>
      <if test="cancelTime != null" >
        #{cancelTime,jdbcType=DATE},
      </if>
      <if test="cancelUserId != null" >
        #{cancelUserId,jdbcType=INTEGER},
      </if>
      <if test="cancelRemark != null" >
        #{cancelRemark,jdbcType=VARCHAR},
      </if>
      <if test="lostType != null" >
        #{lostType,jdbcType=TINYINT},
      </if>
      <if test="lostTime != null" >
        #{lostTime,jdbcType=DATE},
      </if>
      <if test="lostProof != null" >
        #{lostProof,jdbcType=VARCHAR},
      </if>
      <if test="lostUserId != null" >
        #{lostUserId,jdbcType=INTEGER},
      </if>
      <if test="hasFind != null" >
        #{hasFind,jdbcType=BIT},
      </if>
      <if test="findTime != null" >
        #{findTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.abroad.PassportExample" resultType="java.lang.Integer" >
    select count(*) from abroad_passport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update abroad_passport
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.applyId != null" >
        apply_id = #{record.applyId,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null" >
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.classId != null" >
        class_id = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.authority != null" >
        authority = #{record.authority,jdbcType=VARCHAR},
      </if>
      <if test="record.issueDate != null" >
        issue_date = #{record.issueDate,jdbcType=DATE},
      </if>
      <if test="record.expiryDate != null" >
        expiry_date = #{record.expiryDate,jdbcType=DATE},
      </if>
      <if test="record.keepDate != null" >
        keep_date = #{record.keepDate,jdbcType=DATE},
      </if>
      <if test="record.safeBoxId != null" >
        safe_box_id = #{record.safeBoxId,jdbcType=INTEGER},
      </if>
      <if test="record.isLent != null" >
        is_lent = #{record.isLent,jdbcType=BIT},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.cancelType != null" >
        cancel_type = #{record.cancelType,jdbcType=TINYINT},
      </if>
      <if test="record.cancelTypeOther != null" >
        cancel_type_other = #{record.cancelTypeOther,jdbcType=VARCHAR},
      </if>
      <if test="record.cancelConfirm != null" >
        cancel_confirm = #{record.cancelConfirm,jdbcType=BIT},
      </if>
      <if test="record.cancelPic != null" >
        cancel_pic = #{record.cancelPic,jdbcType=VARCHAR},
      </if>
      <if test="record.cancelTime != null" >
        cancel_time = #{record.cancelTime,jdbcType=DATE},
      </if>
      <if test="record.cancelUserId != null" >
        cancel_user_id = #{record.cancelUserId,jdbcType=INTEGER},
      </if>
      <if test="record.cancelRemark != null" >
        cancel_remark = #{record.cancelRemark,jdbcType=VARCHAR},
      </if>
      <if test="record.lostType != null" >
        lost_type = #{record.lostType,jdbcType=TINYINT},
      </if>
      <if test="record.lostTime != null" >
        lost_time = #{record.lostTime,jdbcType=DATE},
      </if>
      <if test="record.lostProof != null" >
        lost_proof = #{record.lostProof,jdbcType=VARCHAR},
      </if>
      <if test="record.lostUserId != null" >
        lost_user_id = #{record.lostUserId,jdbcType=INTEGER},
      </if>
      <if test="record.hasFind != null" >
        has_find = #{record.hasFind,jdbcType=BIT},
      </if>
      <if test="record.findTime != null" >
        find_time = #{record.findTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update abroad_passport
    set id = #{record.id,jdbcType=INTEGER},
      apply_id = #{record.applyId,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      class_id = #{record.classId,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      authority = #{record.authority,jdbcType=VARCHAR},
      issue_date = #{record.issueDate,jdbcType=DATE},
      expiry_date = #{record.expiryDate,jdbcType=DATE},
      keep_date = #{record.keepDate,jdbcType=DATE},
      safe_box_id = #{record.safeBoxId,jdbcType=INTEGER},
      is_lent = #{record.isLent,jdbcType=BIT},
      type = #{record.type,jdbcType=TINYINT},
      cancel_type = #{record.cancelType,jdbcType=TINYINT},
      cancel_type_other = #{record.cancelTypeOther,jdbcType=VARCHAR},
      cancel_confirm = #{record.cancelConfirm,jdbcType=BIT},
      cancel_pic = #{record.cancelPic,jdbcType=VARCHAR},
      cancel_time = #{record.cancelTime,jdbcType=DATE},
      cancel_user_id = #{record.cancelUserId,jdbcType=INTEGER},
      cancel_remark = #{record.cancelRemark,jdbcType=VARCHAR},
      lost_type = #{record.lostType,jdbcType=TINYINT},
      lost_time = #{record.lostTime,jdbcType=DATE},
      lost_proof = #{record.lostProof,jdbcType=VARCHAR},
      lost_user_id = #{record.lostUserId,jdbcType=INTEGER},
      has_find = #{record.hasFind,jdbcType=BIT},
      find_time = #{record.findTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.abroad.Passport" >
    update abroad_passport
    <set >
      <if test="applyId != null" >
        apply_id = #{applyId,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        cadre_id = #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="authority != null" >
        authority = #{authority,jdbcType=VARCHAR},
      </if>
      <if test="issueDate != null" >
        issue_date = #{issueDate,jdbcType=DATE},
      </if>
      <if test="expiryDate != null" >
        expiry_date = #{expiryDate,jdbcType=DATE},
      </if>
      <if test="keepDate != null" >
        keep_date = #{keepDate,jdbcType=DATE},
      </if>
      <if test="safeBoxId != null" >
        safe_box_id = #{safeBoxId,jdbcType=INTEGER},
      </if>
      <if test="isLent != null" >
        is_lent = #{isLent,jdbcType=BIT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="cancelType != null" >
        cancel_type = #{cancelType,jdbcType=TINYINT},
      </if>
      <if test="cancelTypeOther != null" >
        cancel_type_other = #{cancelTypeOther,jdbcType=VARCHAR},
      </if>
      <if test="cancelConfirm != null" >
        cancel_confirm = #{cancelConfirm,jdbcType=BIT},
      </if>
      <if test="cancelPic != null" >
        cancel_pic = #{cancelPic,jdbcType=VARCHAR},
      </if>
      <if test="cancelTime != null" >
        cancel_time = #{cancelTime,jdbcType=DATE},
      </if>
      <if test="cancelUserId != null" >
        cancel_user_id = #{cancelUserId,jdbcType=INTEGER},
      </if>
      <if test="cancelRemark != null" >
        cancel_remark = #{cancelRemark,jdbcType=VARCHAR},
      </if>
      <if test="lostType != null" >
        lost_type = #{lostType,jdbcType=TINYINT},
      </if>
      <if test="lostTime != null" >
        lost_time = #{lostTime,jdbcType=DATE},
      </if>
      <if test="lostProof != null" >
        lost_proof = #{lostProof,jdbcType=VARCHAR},
      </if>
      <if test="lostUserId != null" >
        lost_user_id = #{lostUserId,jdbcType=INTEGER},
      </if>
      <if test="hasFind != null" >
        has_find = #{hasFind,jdbcType=BIT},
      </if>
      <if test="findTime != null" >
        find_time = #{findTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.abroad.Passport" >
    update abroad_passport
    set apply_id = #{applyId,jdbcType=INTEGER},
      cadre_id = #{cadreId,jdbcType=INTEGER},
      class_id = #{classId,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      authority = #{authority,jdbcType=VARCHAR},
      issue_date = #{issueDate,jdbcType=DATE},
      expiry_date = #{expiryDate,jdbcType=DATE},
      keep_date = #{keepDate,jdbcType=DATE},
      safe_box_id = #{safeBoxId,jdbcType=INTEGER},
      is_lent = #{isLent,jdbcType=BIT},
      type = #{type,jdbcType=TINYINT},
      cancel_type = #{cancelType,jdbcType=TINYINT},
      cancel_type_other = #{cancelTypeOther,jdbcType=VARCHAR},
      cancel_confirm = #{cancelConfirm,jdbcType=BIT},
      cancel_pic = #{cancelPic,jdbcType=VARCHAR},
      cancel_time = #{cancelTime,jdbcType=DATE},
      cancel_user_id = #{cancelUserId,jdbcType=INTEGER},
      cancel_remark = #{cancelRemark,jdbcType=VARCHAR},
      lost_type = #{lostType,jdbcType=TINYINT},
      lost_time = #{lostTime,jdbcType=DATE},
      lost_proof = #{lostProof,jdbcType=VARCHAR},
      lost_user_id = #{lostUserId,jdbcType=INTEGER},
      has_find = #{hasFind,jdbcType=BIT},
      find_time = #{findTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="domain.abroad.PassportExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>