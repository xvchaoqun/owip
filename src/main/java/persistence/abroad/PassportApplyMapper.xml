<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.abroad.PassportApplyMapper">
  <resultMap id="BaseResultMap" type="domain.abroad.PassportApply">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="cadre_id" jdbcType="INTEGER" property="cadreId" />
    <result column="class_id" jdbcType="INTEGER" property="classId" />
    <result column="apply_date" jdbcType="DATE" property="applyDate" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="abolish" jdbcType="BIT" property="abolish" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="approve_time" jdbcType="TIMESTAMP" property="approveTime" />
    <result column="op_user_id" jdbcType="INTEGER" property="opUserId" />
    <result column="expect_date" jdbcType="DATE" property="expectDate" />
    <result column="handle_date" jdbcType="DATE" property="handleDate" />
    <result column="handle_user_id" jdbcType="INTEGER" property="handleUserId" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, cadre_id, class_id, apply_date, status, abolish, user_id, approve_time, op_user_id, 
    expect_date, handle_date, handle_user_id, remark, create_time, ip, is_deleted
  </sql>
  <select id="selectByExample" parameterType="domain.abroad.PassportApplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport_apply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from abroad_passport_apply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from abroad_passport_apply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.abroad.PassportApplyExample">
    delete from abroad_passport_apply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.abroad.PassportApply">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into abroad_passport_apply (cadre_id, class_id, apply_date, 
      status, abolish, user_id, 
      approve_time, op_user_id, expect_date, 
      handle_date, handle_user_id, remark, 
      create_time, ip, is_deleted
      )
    values (#{cadreId,jdbcType=INTEGER}, #{classId,jdbcType=INTEGER}, #{applyDate,jdbcType=DATE}, 
      #{status,jdbcType=TINYINT}, #{abolish,jdbcType=BIT}, #{userId,jdbcType=INTEGER}, 
      #{approveTime,jdbcType=TIMESTAMP}, #{opUserId,jdbcType=INTEGER}, #{expectDate,jdbcType=DATE}, 
      #{handleDate,jdbcType=DATE}, #{handleUserId,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{ip,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="domain.abroad.PassportApply">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into abroad_passport_apply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cadreId != null">
        cadre_id,
      </if>
      <if test="classId != null">
        class_id,
      </if>
      <if test="applyDate != null">
        apply_date,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="abolish != null">
        abolish,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="approveTime != null">
        approve_time,
      </if>
      <if test="opUserId != null">
        op_user_id,
      </if>
      <if test="expectDate != null">
        expect_date,
      </if>
      <if test="handleDate != null">
        handle_date,
      </if>
      <if test="handleUserId != null">
        handle_user_id,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cadreId != null">
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="classId != null">
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="applyDate != null">
        #{applyDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="abolish != null">
        #{abolish,jdbcType=BIT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="approveTime != null">
        #{approveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opUserId != null">
        #{opUserId,jdbcType=INTEGER},
      </if>
      <if test="expectDate != null">
        #{expectDate,jdbcType=DATE},
      </if>
      <if test="handleDate != null">
        #{handleDate,jdbcType=DATE},
      </if>
      <if test="handleUserId != null">
        #{handleUserId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.abroad.PassportApplyExample" resultType="java.lang.Long">
    select count(*) from abroad_passport_apply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update abroad_passport_apply
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null">
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.classId != null">
        class_id = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.applyDate != null">
        apply_date = #{record.applyDate,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.abolish != null">
        abolish = #{record.abolish,jdbcType=BIT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.approveTime != null">
        approve_time = #{record.approveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.opUserId != null">
        op_user_id = #{record.opUserId,jdbcType=INTEGER},
      </if>
      <if test="record.expectDate != null">
        expect_date = #{record.expectDate,jdbcType=DATE},
      </if>
      <if test="record.handleDate != null">
        handle_date = #{record.handleDate,jdbcType=DATE},
      </if>
      <if test="record.handleUserId != null">
        handle_user_id = #{record.handleUserId,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ip != null">
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update abroad_passport_apply
    set id = #{record.id,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      class_id = #{record.classId,jdbcType=INTEGER},
      apply_date = #{record.applyDate,jdbcType=DATE},
      status = #{record.status,jdbcType=TINYINT},
      abolish = #{record.abolish,jdbcType=BIT},
      user_id = #{record.userId,jdbcType=INTEGER},
      approve_time = #{record.approveTime,jdbcType=TIMESTAMP},
      op_user_id = #{record.opUserId,jdbcType=INTEGER},
      expect_date = #{record.expectDate,jdbcType=DATE},
      handle_date = #{record.handleDate,jdbcType=DATE},
      handle_user_id = #{record.handleUserId,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      ip = #{record.ip,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.abroad.PassportApply">
    update abroad_passport_apply
    <set>
      <if test="cadreId != null">
        cadre_id = #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="classId != null">
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="applyDate != null">
        apply_date = #{applyDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="abolish != null">
        abolish = #{abolish,jdbcType=BIT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="approveTime != null">
        approve_time = #{approveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opUserId != null">
        op_user_id = #{opUserId,jdbcType=INTEGER},
      </if>
      <if test="expectDate != null">
        expect_date = #{expectDate,jdbcType=DATE},
      </if>
      <if test="handleDate != null">
        handle_date = #{handleDate,jdbcType=DATE},
      </if>
      <if test="handleUserId != null">
        handle_user_id = #{handleUserId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.abroad.PassportApply">
    update abroad_passport_apply
    set cadre_id = #{cadreId,jdbcType=INTEGER},
      class_id = #{classId,jdbcType=INTEGER},
      apply_date = #{applyDate,jdbcType=DATE},
      status = #{status,jdbcType=TINYINT},
      abolish = #{abolish,jdbcType=BIT},
      user_id = #{userId,jdbcType=INTEGER},
      approve_time = #{approveTime,jdbcType=TIMESTAMP},
      op_user_id = #{opUserId,jdbcType=INTEGER},
      expect_date = #{expectDate,jdbcType=DATE},
      handle_date = #{handleDate,jdbcType=DATE},
      handle_user_id = #{handleUserId,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      ip = #{ip,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.abroad.PassportApplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abroad_passport_apply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>