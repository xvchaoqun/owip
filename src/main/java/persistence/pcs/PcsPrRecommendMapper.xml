<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.pcs.PcsPrRecommendMapper">
  <resultMap id="BaseResultMap" type="domain.pcs.PcsPrRecommend">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="config_id" jdbcType="INTEGER" property="configId" />
    <result column="stage" jdbcType="TINYINT" property="stage" />
    <result column="party_id" jdbcType="INTEGER" property="partyId" />
    <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount" />
    <result column="expect_positive_member_count" jdbcType="INTEGER" property="expectPositiveMemberCount" />
    <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount" />
    <result column="actual_positive_member_count" jdbcType="INTEGER" property="actualPositiveMemberCount" />
    <result column="has_report" jdbcType="BIT" property="hasReport" />
    <result column="report_user_id" jdbcType="INTEGER" property="reportUserId" />
    <result column="report_time" jdbcType="TIMESTAMP" property="reportTime" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, config_id, stage, party_id, expect_member_count, expect_positive_member_count, 
    actual_member_count, actual_positive_member_count, has_report, report_user_id, report_time, 
    status
  </sql>
  <select id="selectByExample" parameterType="domain.pcs.PcsPrRecommendExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pcs_pr_recommend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pcs_pr_recommend
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pcs_pr_recommend
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.pcs.PcsPrRecommendExample">
    delete from pcs_pr_recommend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert keyProperty="id" id="insert" parameterType="domain.pcs.PcsPrRecommend">
    insert into pcs_pr_recommend (id, config_id, stage, 
      party_id, expect_member_count, expect_positive_member_count, 
      actual_member_count, actual_positive_member_count, 
      has_report, report_user_id, report_time, 
      status)
    values (#{id,jdbcType=INTEGER}, #{configId,jdbcType=INTEGER}, #{stage,jdbcType=TINYINT}, 
      #{partyId,jdbcType=INTEGER}, #{expectMemberCount,jdbcType=INTEGER}, #{expectPositiveMemberCount,jdbcType=INTEGER}, 
      #{actualMemberCount,jdbcType=INTEGER}, #{actualPositiveMemberCount,jdbcType=INTEGER}, 
      #{hasReport,jdbcType=BIT}, #{reportUserId,jdbcType=INTEGER}, #{reportTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=TINYINT})
  </insert>
  <insert keyProperty="id" id="insertSelective" parameterType="domain.pcs.PcsPrRecommend">
    insert into pcs_pr_recommend
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="configId != null">
        config_id,
      </if>
      <if test="stage != null">
        stage,
      </if>
      <if test="partyId != null">
        party_id,
      </if>
      <if test="expectMemberCount != null">
        expect_member_count,
      </if>
      <if test="expectPositiveMemberCount != null">
        expect_positive_member_count,
      </if>
      <if test="actualMemberCount != null">
        actual_member_count,
      </if>
      <if test="actualPositiveMemberCount != null">
        actual_positive_member_count,
      </if>
      <if test="hasReport != null">
        has_report,
      </if>
      <if test="reportUserId != null">
        report_user_id,
      </if>
      <if test="reportTime != null">
        report_time,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="configId != null">
        #{configId,jdbcType=INTEGER},
      </if>
      <if test="stage != null">
        #{stage,jdbcType=TINYINT},
      </if>
      <if test="partyId != null">
        #{partyId,jdbcType=INTEGER},
      </if>
      <if test="expectMemberCount != null">
        #{expectMemberCount,jdbcType=INTEGER},
      </if>
      <if test="expectPositiveMemberCount != null">
        #{expectPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="actualMemberCount != null">
        #{actualMemberCount,jdbcType=INTEGER},
      </if>
      <if test="actualPositiveMemberCount != null">
        #{actualPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="hasReport != null">
        #{hasReport,jdbcType=BIT},
      </if>
      <if test="reportUserId != null">
        #{reportUserId,jdbcType=INTEGER},
      </if>
      <if test="reportTime != null">
        #{reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.pcs.PcsPrRecommendExample" resultType="java.lang.Long">
    select count(*) from pcs_pr_recommend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pcs_pr_recommend
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.configId != null">
        config_id = #{record.configId,jdbcType=INTEGER},
      </if>
      <if test="record.stage != null">
        stage = #{record.stage,jdbcType=TINYINT},
      </if>
      <if test="record.partyId != null">
        party_id = #{record.partyId,jdbcType=INTEGER},
      </if>
      <if test="record.expectMemberCount != null">
        expect_member_count = #{record.expectMemberCount,jdbcType=INTEGER},
      </if>
      <if test="record.expectPositiveMemberCount != null">
        expect_positive_member_count = #{record.expectPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="record.actualMemberCount != null">
        actual_member_count = #{record.actualMemberCount,jdbcType=INTEGER},
      </if>
      <if test="record.actualPositiveMemberCount != null">
        actual_positive_member_count = #{record.actualPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="record.hasReport != null">
        has_report = #{record.hasReport,jdbcType=BIT},
      </if>
      <if test="record.reportUserId != null">
        report_user_id = #{record.reportUserId,jdbcType=INTEGER},
      </if>
      <if test="record.reportTime != null">
        report_time = #{record.reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pcs_pr_recommend
    set id = #{record.id,jdbcType=INTEGER},
      config_id = #{record.configId,jdbcType=INTEGER},
      stage = #{record.stage,jdbcType=TINYINT},
      party_id = #{record.partyId,jdbcType=INTEGER},
      expect_member_count = #{record.expectMemberCount,jdbcType=INTEGER},
      expect_positive_member_count = #{record.expectPositiveMemberCount,jdbcType=INTEGER},
      actual_member_count = #{record.actualMemberCount,jdbcType=INTEGER},
      actual_positive_member_count = #{record.actualPositiveMemberCount,jdbcType=INTEGER},
      has_report = #{record.hasReport,jdbcType=BIT},
      report_user_id = #{record.reportUserId,jdbcType=INTEGER},
      report_time = #{record.reportTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.pcs.PcsPrRecommend">
    update pcs_pr_recommend
    <set>
      <if test="configId != null">
        config_id = #{configId,jdbcType=INTEGER},
      </if>
      <if test="stage != null">
        stage = #{stage,jdbcType=TINYINT},
      </if>
      <if test="partyId != null">
        party_id = #{partyId,jdbcType=INTEGER},
      </if>
      <if test="expectMemberCount != null">
        expect_member_count = #{expectMemberCount,jdbcType=INTEGER},
      </if>
      <if test="expectPositiveMemberCount != null">
        expect_positive_member_count = #{expectPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="actualMemberCount != null">
        actual_member_count = #{actualMemberCount,jdbcType=INTEGER},
      </if>
      <if test="actualPositiveMemberCount != null">
        actual_positive_member_count = #{actualPositiveMemberCount,jdbcType=INTEGER},
      </if>
      <if test="hasReport != null">
        has_report = #{hasReport,jdbcType=BIT},
      </if>
      <if test="reportUserId != null">
        report_user_id = #{reportUserId,jdbcType=INTEGER},
      </if>
      <if test="reportTime != null">
        report_time = #{reportTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.pcs.PcsPrRecommend">
    update pcs_pr_recommend
    set config_id = #{configId,jdbcType=INTEGER},
      stage = #{stage,jdbcType=TINYINT},
      party_id = #{partyId,jdbcType=INTEGER},
      expect_member_count = #{expectMemberCount,jdbcType=INTEGER},
      expect_positive_member_count = #{expectPositiveMemberCount,jdbcType=INTEGER},
      actual_member_count = #{actualMemberCount,jdbcType=INTEGER},
      actual_positive_member_count = #{actualPositiveMemberCount,jdbcType=INTEGER},
      has_report = #{hasReport,jdbcType=BIT},
      report_user_id = #{reportUserId,jdbcType=INTEGER},
      report_time = #{reportTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.pcs.PcsPrRecommendExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pcs_pr_recommend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>