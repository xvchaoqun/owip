<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.pcs.PcsVoteGroupMapper">
  <resultMap id="BaseResultMap" type="domain.pcs.PcsVoteGroup">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="config_id" jdbcType="INTEGER" property="configId" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="leader" jdbcType="VARCHAR" property="leader" />
    <result column="member" jdbcType="VARCHAR" property="member" />
    <result column="record_user_id" jdbcType="INTEGER" property="recordUserId" />
    <result column="has_report" jdbcType="BIT" property="hasReport" />
    <result column="vote" jdbcType="INTEGER" property="vote" />
    <result column="valid" jdbcType="INTEGER" property="valid" />
    <result column="invalid" jdbcType="INTEGER" property="invalid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, config_id, type, name, leader, member, record_user_id, has_report, vote, valid, 
    invalid
  </sql>
  <select id="selectByExample" parameterType="domain.pcs.PcsVoteGroupExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pcs_vote_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pcs_vote_group
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pcs_vote_group
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.pcs.PcsVoteGroupExample">
    delete from pcs_vote_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.pcs.PcsVoteGroup">
    insert into pcs_vote_group (id, config_id, type, 
      name, leader, member, 
      record_user_id, has_report, vote, 
      valid, invalid)
    values (#{id,jdbcType=INTEGER}, #{configId,jdbcType=INTEGER}, #{type,jdbcType=TINYINT}, 
      #{name,jdbcType=VARCHAR}, #{leader,jdbcType=VARCHAR}, #{member,jdbcType=VARCHAR}, 
      #{recordUserId,jdbcType=INTEGER}, #{hasReport,jdbcType=BIT}, #{vote,jdbcType=INTEGER}, 
      #{valid,jdbcType=INTEGER}, #{invalid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="domain.pcs.PcsVoteGroup">
    insert into pcs_vote_group
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="configId != null">
        config_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="leader != null">
        leader,
      </if>
      <if test="member != null">
        member,
      </if>
      <if test="recordUserId != null">
        record_user_id,
      </if>
      <if test="hasReport != null">
        has_report,
      </if>
      <if test="vote != null">
        vote,
      </if>
      <if test="valid != null">
        valid,
      </if>
      <if test="invalid != null">
        invalid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="configId != null">
        #{configId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="leader != null">
        #{leader,jdbcType=VARCHAR},
      </if>
      <if test="member != null">
        #{member,jdbcType=VARCHAR},
      </if>
      <if test="recordUserId != null">
        #{recordUserId,jdbcType=INTEGER},
      </if>
      <if test="hasReport != null">
        #{hasReport,jdbcType=BIT},
      </if>
      <if test="vote != null">
        #{vote,jdbcType=INTEGER},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=INTEGER},
      </if>
      <if test="invalid != null">
        #{invalid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.pcs.PcsVoteGroupExample" resultType="java.lang.Long">
    select count(*) from pcs_vote_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pcs_vote_group
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.configId != null">
        config_id = #{record.configId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.leader != null">
        leader = #{record.leader,jdbcType=VARCHAR},
      </if>
      <if test="record.member != null">
        member = #{record.member,jdbcType=VARCHAR},
      </if>
      <if test="record.recordUserId != null">
        record_user_id = #{record.recordUserId,jdbcType=INTEGER},
      </if>
      <if test="record.hasReport != null">
        has_report = #{record.hasReport,jdbcType=BIT},
      </if>
      <if test="record.vote != null">
        vote = #{record.vote,jdbcType=INTEGER},
      </if>
      <if test="record.valid != null">
        valid = #{record.valid,jdbcType=INTEGER},
      </if>
      <if test="record.invalid != null">
        invalid = #{record.invalid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pcs_vote_group
    set id = #{record.id,jdbcType=INTEGER},
      config_id = #{record.configId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT},
      name = #{record.name,jdbcType=VARCHAR},
      leader = #{record.leader,jdbcType=VARCHAR},
      member = #{record.member,jdbcType=VARCHAR},
      record_user_id = #{record.recordUserId,jdbcType=INTEGER},
      has_report = #{record.hasReport,jdbcType=BIT},
      vote = #{record.vote,jdbcType=INTEGER},
      valid = #{record.valid,jdbcType=INTEGER},
      invalid = #{record.invalid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.pcs.PcsVoteGroup">
    update pcs_vote_group
    <set>
      <if test="configId != null">
        config_id = #{configId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="leader != null">
        leader = #{leader,jdbcType=VARCHAR},
      </if>
      <if test="member != null">
        member = #{member,jdbcType=VARCHAR},
      </if>
      <if test="recordUserId != null">
        record_user_id = #{recordUserId,jdbcType=INTEGER},
      </if>
      <if test="hasReport != null">
        has_report = #{hasReport,jdbcType=BIT},
      </if>
      <if test="vote != null">
        vote = #{vote,jdbcType=INTEGER},
      </if>
      <if test="valid != null">
        valid = #{valid,jdbcType=INTEGER},
      </if>
      <if test="invalid != null">
        invalid = #{invalid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.pcs.PcsVoteGroup">
    update pcs_vote_group
    set config_id = #{configId,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      name = #{name,jdbcType=VARCHAR},
      leader = #{leader,jdbcType=VARCHAR},
      member = #{member,jdbcType=VARCHAR},
      record_user_id = #{recordUserId,jdbcType=INTEGER},
      has_report = #{hasReport,jdbcType=BIT},
      vote = #{vote,jdbcType=INTEGER},
      valid = #{valid,jdbcType=INTEGER},
      invalid = #{invalid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.pcs.PcsVoteGroupExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pcs_vote_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>