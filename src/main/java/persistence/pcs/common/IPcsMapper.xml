<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.pcs.common.IPcsMapper">

    <select id="selectVoteCandidateStatList"
            resultMap="persistence.pcs.PcsVoteCandidateMapper.BaseResultMap"
            parameterType="map">
        select user_id, is_from_stage, realname, sum(c.agree) as agree, sum(c.degree) as degree,
        sum(c.abstain) as abstain,sum(c.invalid) as invalid from pcs_vote_candidate c, pcs_vote_group g
         where g.id=c.group_id and g.has_report=1 and g.type=#{type}
        <if test="userId!=null">
            and c.user_id=#{userId}
        </if>
        <if test="isFromStage!=null">
            and c.is_from_stage=#{isFromStage}
        </if> group by c.user_id  order  by  agree desc, c.sort_order asc, c.user_id asc
    </select>

    <sql id="selectPrList_where">
        where c.user_id= u.id and c.config_id = #{configId} and c.stage = #{stage}
        and is_chosen =1 and is_proposal=1
        <if test="search != null">
            and (u.username like #{search} or u.realname like #{search} or u.code like #{search})
        </if>
    </sql>
    <select id="selectPrList" resultMap="persistence.pcs.PcsPrCandidateViewMapper.BaseResultMap" parameterType="map">
        select c.* from pcs_pr_candidate_view c, sys_user_view u
        <include refid="selectPrList_where"/>
        order by c.proposal_sort_order asc
    </select>
    <select id="countPrList" parameterType="map" resultType="java.lang.Integer">
        select count(c.user_id) from pcs_pr_candidate_view c, sys_user_view u
        <include refid="selectPrList_where"/>
    </select>

    <!--全校 应选代表情况-->
    <select id="schoolPcsPrAllocate" parameterType="map" resultMap="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        select sum(pro_count) as pro_count,
            sum(stu_count) as stu_count,
            sum(retire_count) as retire_count,
            sum(female_count) as female_count, sum(minority_count) as minority_count,
            sum(under_fifty_count) as under_fifty_count
        from pcs_pr_allocate
        where config_id=#{configId}
    </select>

    <!-- 党代表候选人初步人选数据统计 partyId=null时是全校统计-->
    <select id="statRealPcsPrAllocate" parameterType="map"
            resultMap="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        select sum(if(type=1, 1, 0)) pro_count, sum(if(type=2, 1, 0)) stu_count,
        sum(if(type=3, 1, 0)) retire_count, sum(if(gender=2, 1, 0)) female_count,
        sum(if(nation not like '%汉%', 1,0)) minority_count,
        sum(if( TIMESTAMPDIFF(YEAR, birth, now()) <![CDATA[<]]> 50, 1, 0)) under_fifty_count
        from pcs_pr_candidate_view where config_id=#{configId} and stage=#{stage}
        <if test="partyId!=null">
            and party_id=#{partyId}
        </if>
        <if test="isChosen!=null">
            and is_chosen=#{isChosen}
        </if>
    </select>

    <!--（党代表）分党委推荐汇总情况（统计已上报数据）-->
    <resultMap id="PrPartyBaseResultMap" type="persistence.pcs.common.PcsPrPartyBean"
               extends="persistence.party.PartyViewMapper.BaseResultMap">
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="config_id" jdbcType="INTEGER" property="configId"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="expect_positive_member_count" jdbcType="INTEGER" property="expectPositiveMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="actual_positive_member_count" jdbcType="INTEGER" property="actualPositiveMemberCount"/>
        <result column="has_report" jdbcType="BIT" property="hasReport"/>
        <result column="recommend_status" jdbcType="TINYINT" property="recommendStatus"/>
        <result column="check_remark" jdbcType="VARCHAR" property="checkRemark"/>
    </resultMap>
    <sql id="searchPcsPrPartyBeans">
        where op.is_deleted=0
        <if test="partyId!=null">
            and op.id=#{partyId}
        </if>
        <if test="hasReport">
            and ppr.has_report=1
        </if>
        <if test="hasReport!=null and !hasReport">
            and (ppr.id is null or ppr.has_report=0)
        </if>
        <if test="recommendStatus!=null">
            and ppr.status=#{recommendStatus}
        </if>
    </sql>
    <select id="selectPcsPrPartyBeanList" resultMap="PrPartyBaseResultMap" parameterType="map">
        select op.*, ${stage} as stage, ${configId} as config_id,
        ppr.expect_member_count,ppr.expect_positive_member_count,
        ppr.actual_member_count, ppr.actual_positive_member_count, ppr.has_report,
        ppr.status as recommend_status, ppr.check_remark from pcs_party_view op
        left join (select * from pcs_pr_recommend where config_id=#{configId} and stage=#{stage}) ppr on op.id =
        ppr.party_id
        <include refid="searchPcsPrPartyBeans"/>
        order by op.sort_order desc
    </select>
    <select id="countPcsPrPartyBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_party_view op
        left join (select * from pcs_pr_recommend where config_id=#{configId} and stage=#{stage}) ppr on op.id =
        ppr.party_id
        <include refid="searchPcsPrPartyBeans"/>
    </select>

    <!--党代表分配方案-->
    <resultMap id="PcsPrAllocateBaseResultMap" type="persistence.pcs.common.PcsPrAllocateBean"
               extends="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        <result column="party_id" jdbcType="INTEGER" property="partyId"/>
        <result column="party_name" jdbcType="VARCHAR" property="partyName"/>
        <result column="positive_count" jdbcType="INTEGER" property="positiveCount"/>
        <result column="member_count" jdbcType="INTEGER" property="memberCount"/>
    </resultMap>
    <sql id="searchPcsPrAllocateBeans">
        where op.is_deleted=0
        <if test="partyId!=null">
            and op.id=${partyId}
        </if>
    </sql>
    <select id="selectPcsPrAllocateBeanList" resultMap="PcsPrAllocateBaseResultMap" parameterType="map">
        select ppa.id, op.id as party_id, op.name as party_name, op.member_count, op.positive_count,
        ${configId} as config_id, ppa.pro_count,
        ppa.stu_count, ppa.retire_count, ppa.female_count, ppa.minority_count, ppa.under_fifty_count
        from pcs_party_view op
        left join (select * from pcs_pr_allocate where config_id=#{configId}) ppa on op.id=ppa.party_id
        <include refid="searchPcsPrAllocateBeans"/>
        order by op.sort_order desc
    </select>
    <select id="countPcsPrAllocateBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_party_view op
        <include refid="searchPcsPrAllocateBeans"/>
    </select>

    <!--分党委推荐汇总情况（统计已上报数据）-->
    <resultMap id="PartyBaseResultMap" type="persistence.pcs.common.PcsPartyBean"
               extends="persistence.party.PartyViewMapper.BaseResultMap">
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="config_id" jdbcType="INTEGER" property="configId"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="report_id" jdbcType="INTEGER" property="reportId"/>
    </resultMap>
    <sql id="searchPcsPartyBeans">
        where op.is_deleted=0
        <if test="partyId!=null">
            and op.id=#{partyId}
        </if>
        <if test="hasReport!=null">
            <if test="hasReport">
                and par.id is not null
            </if>
            <if test="!hasReport">
                and par.id is null
            </if>
        </if>
    </sql>
    <select id="selectPcsPartyBeanList" resultMap="PartyBaseResultMap" parameterType="map">
        select op.*, ${stage} as stage, ${configId} as config_id, pr.expect_member_count,
        pr.actual_member_count, par.id as report_id from pcs_party_view op
        left join
        (select pr.party_id,
        sum(pr.expect_member_count) as expect_member_count,
        sum(pr.actual_member_count) as actual_member_count from pcs_recommend pr
        where pr.stage=#{stage} and pr.config_id=#{configId} and pr.party_id
        in (select party_id from pcs_admin_report where config_id=#{configId} and stage=#{stage})
        group by pr.party_id) pr on
        op.id = pr.party_id
        left join pcs_admin_report par on par.config_id=#{configId}
        and par.stage=#{stage} and par.party_id = pr.party_id
        <include refid="searchPcsPartyBeans"/>
        order by op.sort_order desc
    </select>
    <select id="countPcsPartyBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_party_view op
        left join pcs_admin_report par on par.config_id=#{configId}
        and par.stage=#{stage} and par.party_id = op.id
        <include refid="searchPcsPartyBeans"/>
    </select>

    <!--党支部推荐汇总情况-->
    <resultMap id="BranchBaseResultMap" type="persistence.pcs.common.PcsBranchBean">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="party_id" jdbcType="INTEGER" property="partyId"/>
        <result column="branch_id" jdbcType="INTEGER" property="branchId"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="config_id" jdbcType="INTEGER" property="configId"/>
        <result column="is_finished" jdbcType="BIT" property="isFinished"/>
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="member_count" jdbcType="INTEGER" property="memberCount"/>
        <result column="positive_count" jdbcType="INTEGER" property="positiveCount"/>
        <result column="student_member_count" jdbcType="INTEGER" property="studentMemberCount"/>
        <result column="teacher_member_count" jdbcType="INTEGER" property="teacherMemberCount"/>
        <result column="retire_member_count" jdbcType="INTEGER" property="retireMemberCount"/>
    </resultMap>
    <sql id="searchPcsBranchBeans">
        <where>
            <if test="partyId!=null">
                and pbv.party_id=#{partyId}
            </if>
            <if test="branchId!=null">
                and pbv.branch_id=#{branchId}
            </if>
            <if test="isFinished!=null">
                and pr.is_finished=#{isFinished}
            </if>
        </where>
    </sql>
    <select id="selectPcsBranchBeanList" resultMap="BranchBaseResultMap" parameterType="map">
        select pr.id, pbv.*, ${stage} as stage, ${configId} as config_id,
        pr.expect_member_count, pr.actual_member_count, pr.is_finished from pcs_branch_view pbv
        left join (select * from pcs_recommend where stage=#{stage} and config_id=#{configId}) pr
        on pr.party_id=pbv.party_id and ((pbv.branch_id is null and pr.branch_id is null) or pbv.branch_id=pr.branch_id)
        <include refid="searchPcsBranchBeans"/>
        order by pbv.member_count desc, pbv.party_id asc, pbv.branch_id asc
    </select>
    <select id="countPcsBranchBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_branch_view pbv
        left join (select * from pcs_recommend where stage=#{stage} and config_id=#{configId}) pr
        on pr.party_id=pbv.party_id and ((pbv.branch_id is null and pr.branch_id is null) or pbv.branch_id=pr.branch_id)
        <include refid="searchPcsBranchBeans"/>
    </select>

    <resultMap id="CandidateBaseResultMap" type="persistence.pcs.common.IPcsCandidateView"
               extends="persistence.pcs.PcsCandidateViewMapper.BaseResultMap">
        <result column="party_ids" jdbcType="VARCHAR" property="partyIds"/>
        <result column="branch_ids" jdbcType="VARCHAR" property="branchIds"/>
        <result column="branch_count" jdbcType="INTEGER" property="branchCount"/>
        <result column="member_count" jdbcType="INTEGER" property="memberCount"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>

        <result column="chosen_id" jdbcType="INTEGER" property="chosenId"/>
    </resultMap>

    <!-- 获取被推荐人都有哪些支部推荐了（除直属党支部，只统计已上报的分党委） -->
    <select id="selectCandidateBranchIds" resultType="int" parameterType="map">
        select pcv.branch_id
        from pcs_candidate_view pcv
          where pcv.config_id=#{configId} and pcv.stage=#{stage} and pcv.type=#{candidateType}
            and branch_id is not null and user_id=#{userId}
            and pcv.party_id
        in (select party_id from pcs_admin_report where config_id=#{configId} and stage=#{stage})
    </select>

    <!--分党委每个被推荐人的情况（只统计已上报）-->
    <select id="selectPartyCandidateList" resultMap="CandidateBaseResultMap" parameterType="map">
        select a.user_id, a.is_from_stage, pcc.id as chosen_id, pcc.sort_order, a.code, a.realname, a.title, a.ext_unit,
        a.gender,a.nation,
        a.birth,a.grow_time, a.work_time, a.pro_post, a.type, a.party_ids,
        a.branch_count,
        d.member_count, b.expect_member_count,
        b.actual_member_count,
        if(isnull(c.status), -1, c.status) as cadre_status from
        (
        select pcv.*,
        group_concat(distinct pcv.party_id) as party_ids,
        count(pcv.id) as branch_count
        from pcs_candidate_view pcv
        where pcv.config_id=#{configId} and pcv.stage=#{stage} and pcv.type=#{candidateType} and pcv.party_id
        in (select party_id from pcs_admin_report where config_id=#{configId} and stage=#{stage})
        group by pcv.user_id
        ) a left join(
        select pc.user_id, sum(expect_member_count) as expect_member_count, sum(actual_member_count) as
        actual_member_count from pcs_recommend pr
        right join pcs_candidate pc on pr.id=pc.recommend_id and config_id=#{configId}
        and stage=#{stage} and type=#{candidateType} group by pc.user_id) b
        on b.user_id=a.user_id
        left join (
        select tmp.user_id, sum(member_count) as member_count from pcs_branch_view pbv
        right join(
        select pc.*, pr.config_id, pr.stage, pr.party_id, pr.branch_id from pcs_candidate pc left join pcs_recommend pr
        on pc.recommend_id=pr.id
        ) tmp on tmp.config_id=#{configId} and tmp.stage=#{stage} and tmp.type=#{candidateType} and tmp.party_id=
        pbv.party_id and ((pbv.branch_id is null and tmp.branch_id is null) or pbv.branch_id=tmp.branch_id) group by
        tmp.user_id
        ) d on d.user_id =a.user_id
        left join cadre c on c.user_id=a.user_id
        left join pcs_candidate_chosen pcc on a.config_id=pcc.config_id
        and a.stage=pcc.stage and a.type=pcc.type and a.user_id=pcc.user_id
        <where>
            <if test="userId!=null">
                and a.user_id=#{userId}
            </if>
            <if test="isChosen">
                and pcc.id is not null
            </if>
        </where>
        order by
        <if test="isChosen">
            pcc.sort_order asc
        </if>
        <if test="isChosen==null or !isChosen">
            branch_count desc, FIND_IN_SET(cadre_status, '6,4,1,3,-1'), c.sort_order desc, actual_member_count desc
        </if>
    </select>
    <select id="countPartyCandidateList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct pcv.user_id) from pcs_candidate_view pcv
        left join pcs_candidate_chosen pcc on pcv.config_id=pcc.config_id
        and pcv.stage=pcc.stage and pcv.type=pcc.type and pcv.user_id=pcc.user_id
        <where>
            <if test="userId!=null">
                and pcv.user_id=#{userId}
            </if>
            <if test="isChosen">
                and pcc.id is not null
            </if>
            and pcv.config_id=#{configId} and pcv.stage=#{stage}
            and pcv.type=#{candidateType} and pcv.party_id
            in (select party_id from pcs_admin_report where config_id=#{configId} and stage=#{stage})
        </where>
    </select>

    <!--党支部每个被推荐人的情况-->
    <sql id="searchBranchCandidates">
        <where>
            <if test="userId!=null">
                and pcv.user_id=#{userId}
            </if>
            and pcv.config_id=#{configId} and pcv.stage=#{stage} and pcv.type=#{candidateType} and
            pcv.party_id=#{partyId}
        </where>
    </sql>
    <select id="selectBranchCandidateList" resultMap="CandidateBaseResultMap" parameterType="map">
        select pcv.*,
        group_concat(distinct pcv.party_id) as party_ids,
        group_concat(pcv.branch_id) as branch_ids,
        count(pcv.id) as branch_count,
        sum(ifnull(prv.member_count,0)) as member_count,
        sum(ifnull(prv.expect_member_count, 0)) as expect_member_count,
        sum(ifnull(prv.actual_member_count, 0)) as actual_member_count,
        if(isnull(c.status), -1, c.status) as cadre_status
        from pcs_candidate_view pcv
        left join (select pbv.*, pr.expect_member_count, pr.actual_member_count, pr.is_finished from pcs_branch_view pbv
        left join pcs_recommend pr on pr.config_id=#{configId} and pr.stage=#{stage} and pr.party_id=pbv.party_id and
        ((pbv.branch_id is null and pr.branch_id is null) or pbv.branch_id=pr.branch_id)) prv on
        prv.party_id=pcv.party_id and
        ((prv.branch_id is null and pcv.branch_id is null) or prv.branch_id=pcv.branch_id)
        left join cadre c on c.user_id=pcv.user_id
        <include refid="searchBranchCandidates"/>
        group by pcv.user_id
        order by branch_count desc, FIND_IN_SET(cadre_status, '6,4,1,3,-1'), c.sort_order desc, actual_member_count desc
    </select>
    <select id="countBranchCandidateList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct pcv.user_id) from pcs_candidate_view pcv
        <include refid="searchBranchCandidates"/>
    </select>

    <sql id="selectRList_where">

        <if test="pollId != null">
            and r.poll_id = #{pollId}
        </if>
        <if test="userId != null">
            and r.user_id = #{userId}
        </if>
        <if test="partyId != null">
            and r.party_id = #{partyId}
        </if>
        <if test="branchId != null">
            and r.branch_id = #{branchId}
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)or(branchIdList != null and branchIdList.size > 0)">
            and r.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
            or r.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
    </sql>

    <sql id="selectR1List_where">

         and r1.status=2
        <if test="pollId != null">
          and r1.poll_id=#{pollId}
        </if>
        <if test="userId != null">
            and r1.user_id = #{userId}
        </if>
        <if test="partyId != null">
            and r1.party_id = #{partyId}
        </if>
        <if test="branchId != null">
            and r1.branch_id = #{branchId}
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)or(branchIdList != null and branchIdList.size > 0)">
            and r1.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
            or r1.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
    </sql>

    <select id="selectResultList" parameterType="map" resultType="persistence.pcs.common.PcsFinalResult">
        select r.poll_id as pollId, r.user_id as userId, r.type as type,  sum(if(is_positive,1,0)) as positiveBallot,
        sum(If(status=1,1,0)) AS supportNum, sum(if(is_positive,0,1)) as growBallot from pcs_poll_result r
        <where>
            is_second=0
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.user_id order by r.type desc, supportNum desc
    </select>

    <select id="countResult" parameterType="map" resultType="java.lang.Integer" >
        select count(*) from (select r.* from pcs_poll_result r
        <where>
            is_second=0
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.user_id)tmp
    </select>

    <select id="selectSecondResultList" parameterType="map" resultType="persistence.pcs.common.PcsFinalResult">
        select r.poll_id as pollId, r.candidate_user_id as userId, r.type as type,  sum(if(r.is_positive,1,0)) as positiveBallot, sum(if(r.is_positive,0,1)) as growBallot,
        sum(If(status=1,1,0)) AS supportNum, sum(if(r.status=2,1,0)) as notSupportNum, sum(if(r.status=3,1,0)) as notVoteNum from pcs_poll_result r
        <where>
            is_second=1
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.candidate_user_id
        union all
        select r1.poll_id as pollId, r1.user_id as userId, r1.type as type,  sum(if(r1.is_positive,1,0)) as positiveBallot, sum(if(r1.is_positive,0,1)) as growBallot,
        sum(If(r1.status=2,1,0)) AS supportNum, null as notSupportNum, null as notVoteNum from pcs_poll_result r1
        <where>
            is_second=1
            <include refid="selectR1List_where"/>
        </where>
        group by r1.type, r1.user_id order by type desc, supportNum desc
    </select>

    <select id="countSecondResult" parameterType="map" resultType="java.lang.Integer" >
        select count(*) from (select r.candidate_user_id as user_id from pcs_poll_result r
        <where>
            is_second=1
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.candidate_user_id
        union all
        select r1.user_id from pcs_poll_result r1
        <where>
            is_second=1
            <include refid="selectR1List_where"/>
        </where>
        group by r1.type, r1.user_id)tmp
    </select>
</mapper>