<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.pcs.common.IPcsMapper">

    <!-- 读取当前系统中应参与党代会的分党委（未删除、党员总数大于0的）-->
    <select id="expectPcsPartyList" resultMap="persistence.pcs.PcsPartyMapper.BaseResultMap">
        select #{configId} as config_id, p.id as party_id, p.name, mtmp.is_direct_branch, p.sort_order, btmp.num as branch_count, mtmp.num as member_count,   mtmp.positive_count, mtmp.s_num as student_member_count,
        mtmp2.t_num as teacher_member_count, mtmp2.t2_num as retire_member_count, pmgtmp.num as group_count, pmgtmp2.num as present_group_count from ow_party p
        left join (select count(ob.id) as num, ob.party_id from ow_branch ob

        where ob.is_deleted=0 group by ob.party_id) btmp on btmp.party_id=p.id
        left join (select sum(if(om.type=2, 1, 0)) as s_num, sum(if(om.political_status=2, 1, 0)) as positive_count, count(om.user_id) as num,  om.party_id, 0 is_direct_branch from ow_member om
        left join ow_branch ob on ob.id = om.branch_id
        where ob.is_deleted=0 and om.status=1 group by party_id
        union all
        select sum(if(om.type=2, 1, 0)) as s_num, sum(if(om.political_status=2, 1, 0)) as positive_count, count(om.user_id) as num,  om.party_id, 1 is_direct_branch from ow_member om
        left join (select op.* from ow_party op, base_meta_type bmt  where op.class_id=bmt.id and bmt.code='mt_direct_branch') as op on op.id = om.party_id
        where op.is_deleted=0 and om.status=1 group by party_id
        ) mtmp on mtmp.party_id=p.id
        left join (select sum(if(om.is_retire=0, 1, 0)) as t_num, sum(if(om.is_retire=1, 1, 0)) as t2_num,
        count(om.user_id) as num, om.party_id from ow_member_view om
        where type=1 and status=1 group by party_id) mtmp2 on mtmp2.party_id=p.id
        left join (select count(*) as num, party_id from ow_party_member_group group by party_id) pmgtmp on pmgtmp.party_id=p.id
        left join (select count(*) as num, party_id from ow_party_member_group where is_present=1 group by party_id) pmgtmp2 on pmgtmp2.party_id=p.id
        where p.is_deleted=0 and mtmp.num>0
    </select>
    <!-- 读取当前系统中应参与党代会的党支部（含直属党支部，未删除、党员总数大于0的）-->
    <select id="expectPcsBranchList" resultMap="persistence.pcs.PcsBranchMapper.BaseResultMap">
        select #{configId} as config_id, ob.party_id, ob.id as branch_id, 0 as is_direct_branch, op.name, ob.name, ob.sort_order, ob.member_count, ob.positive_count,  ob.student_member_count, ob.teacher_member_count, ob.retire_member_count from ow_branch_view ob
        left join ow_party op on ob.party_id=op.id
        where ob.is_deleted=0 and ob.member_count>0
        union all
        select #{configId} as config_id, op.id as party_id, null as branch_id, 1 as is_direct_branch, op.name, op.name, 99999 as sort_order, op.member_count, op.positive_count, op.student_member_count,
         op.teacher_member_count, op.retire_member_count from ow_party_view op, base_meta_type bmt
        where op.is_deleted=0 and op.member_count>0 and op.class_id=bmt.id and bmt.code='mt_direct_branch'
    </select>

    <select id="selectVoteCandidateStatList"
            resultMap="persistence.pcs.PcsVoteCandidateMapper.BaseResultMap"
            parameterType="map">
        select user_id, is_from_stage, realname, sum(c.agree) as agree, sum(c.degree) as degree,
        sum(c.abstain) as abstain,sum(c.invalid) as invalid from pcs_vote_candidate c, pcs_vote_group g
         where g.id=c.group_id and g.has_report=1 and g.type=#{type}
        <if test="userId!=null">
            and c.user_id=#{userId}
        </if>
        <if test="isFromStage!=null">
            and c.is_from_stage=#{isFromStage}
        </if> group by c.user_id  order  by  agree desc, c.sort_order asc, c.user_id asc
    </select>

    <sql id="selectPrList_where">
        where c.user_id= u.id and c.config_id = #{configId} and c.stage = #{stage}
        and is_chosen =1 and is_proposal=1
        <if test="search != null">
            and (u.username like #{search} or u.realname like #{search} or u.code like #{search})
        </if>
    </sql>
    <select id="selectPrList" resultMap="persistence.pcs.PcsPrCandidateMapper.BaseResultMap" parameterType="map">
        select c.* from pcs_pr_candidate c, sys_user_view u
        <include refid="selectPrList_where"/>
        order by c.proposal_sort_order asc
    </select>
    <select id="countPrList" parameterType="map" resultType="java.lang.Integer">
        select count(c.user_id) from pcs_pr_candidate c, sys_user_view u
        <include refid="selectPrList_where"/>
    </select>

    <!--全校 应选代表情况-->
    <select id="schoolPcsPrAllocate" parameterType="map" resultMap="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        select sum(pro_count) as pro_count,
            sum(stu_count) as stu_count,
            sum(retire_count) as retire_count,
            sum(female_count) as female_count, sum(minority_count) as minority_count,
            sum(under_fifty_count) as under_fifty_count
        from pcs_pr_allocate
        where config_id=#{configId}
    </select>

    <!-- 党代表候选人初步人选数据统计 partyId=null时是全校统计-->
    <select id="statRealPcsPrAllocate" parameterType="map"
            resultMap="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        select sum(if(type=1, 1, 0)) pro_count, sum(if(type=2, 1, 0)) stu_count,
        sum(if(type=3, 1, 0)) retire_count, sum(if(gender=2, 1, 0)) female_count,
        sum(if(nation not like '%汉%', 1,0)) minority_count,
        sum(if( TIMESTAMPDIFF(YEAR, birth, now()) <![CDATA[<]]> 50, 1, 0)) under_fifty_count
        from pcs_pr_candidate where config_id=#{configId} and stage=#{stage}
        <if test="partyId!=null">
            and party_id=#{partyId}
        </if>
        <if test="isChosen!=null">
            and is_chosen=#{isChosen}
        </if>
    </select>

    <!--（党代表）分党委推荐汇总情况（统计已上报数据）-->
    <resultMap id="PrPartyBaseResultMap" type="persistence.pcs.common.PcsPrPartyBean"
               extends="persistence.pcs.PcsPartyMapper.BaseResultMap">
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="expect_positive_member_count" jdbcType="INTEGER" property="expectPositiveMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="actual_positive_member_count" jdbcType="INTEGER" property="actualPositiveMemberCount"/>
        <result column="has_report" jdbcType="BIT" property="hasReport"/>
        <result column="recommend_status" jdbcType="TINYINT" property="recommendStatus"/>
        <result column="check_remark" jdbcType="VARCHAR" property="checkRemark"/>
    </resultMap>
    <sql id="searchPcsPrPartyBeans">
        <where>
        op.config_id=#{configId}
        <if test="partyId!=null">
            and op.party_id=#{partyId}
        </if>
        <if test="hasReport">
            and ppr.has_report=1
        </if>
        <if test="hasReport!=null and !hasReport">
            and (ppr.id is null or ppr.has_report=0)
        </if>
        <if test="recommendStatus!=null">
            and ppr.status=#{recommendStatus}
        </if>
        </where>
    </sql>
    <select id="selectPcsPrPartyBeanList" resultMap="PrPartyBaseResultMap" parameterType="map">
        select op.*, ${stage} as stage, op.config_id,
        ppr.expect_member_count,ppr.expect_positive_member_count,
        ppr.actual_member_count, ppr.actual_positive_member_count, ppr.has_report,
        ppr.status as recommend_status, ppr.check_remark from pcs_party op
        left join pcs_pr_recommend ppr on ppr.config_id=op.config_id and ppr.stage=#{stage} and ppr.party_id = op.party_id
        <include refid="searchPcsPrPartyBeans"/>
        order by op.sort_order desc
    </select>
    <select id="countPcsPrPartyBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_party op
        left join pcs_pr_recommend ppr on ppr.config_id=op.config_id and ppr.stage=#{stage} and ppr.party_id = op.party_id
        <include refid="searchPcsPrPartyBeans"/>
    </select>

    <!--党代表分配方案-->
    <resultMap id="PcsPrAllocateBaseResultMap" type="persistence.pcs.common.PcsPrAllocateBean"
               extends="persistence.pcs.PcsPrAllocateMapper.BaseResultMap">
        <result column="party_id" jdbcType="INTEGER" property="partyId"/>
        <result column="party_name" jdbcType="VARCHAR" property="partyName"/>
        <result column="positive_count" jdbcType="INTEGER" property="positiveCount"/>
        <result column="member_count" jdbcType="INTEGER" property="memberCount"/>
    </resultMap>

    <select id="selectPcsPrAllocateBeanList" resultMap="PcsPrAllocateBaseResultMap" parameterType="map">
        select ppa.id, op.party_id, op.name as party_name, op.member_count, op.positive_count,
        op.config_id, ppa.candidate_count, ppa.pro_count,
        ppa.stu_count, ppa.retire_count, ppa.female_count, ppa.minority_count, ppa.under_fifty_count
        from pcs_party op
        left join pcs_pr_allocate ppa on op.config_id=ppa.config_id and op.party_id=ppa.party_id
        where op.config_id=#{configId}
        <if test="partyId!=null">
            and op.id=${partyId}
        </if>
        order by op.sort_order desc
    </select>
    <select id="countPcsPrAllocateBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_party op
        where op.config_id=#{configId}
          <if test="partyId!=null">
            and op.id=${partyId}
        </if>
    </select>

    <resultMap id="PartyBaseResultMap" type="persistence.pcs.common.PcsPartyBean"
               extends="persistence.pcs.PcsPartyMapper.BaseResultMap">
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="report_id" jdbcType="INTEGER" property="reportId"/>
    </resultMap>
    <sql id="where_searchPcsPartyBeans">
        <where>
        pr.config_id=#{configId} and pr.stage=#{stage}
        <if test="partyId!=null">
            and op.party_id=#{partyId}
        </if>
        <if test="hasReport!=null">
            <if test="hasReport">
                and par.id is not null
            </if>
            <if test="!hasReport">
                and par.id is null
            </if>
        </if>
        </where>
    </sql>
    <!-- 分党委推荐汇总情况-->
    <select id="selectPcsPartyBeanList" resultMap="PartyBaseResultMap" parameterType="map">
      select op.*, pr.stage, pr.config_id, sum(pr.expect_member_count) as expect_member_count,
        sum(pr.actual_member_count) as actual_member_count, par.id as report_id from pcs_party op
        left join pcs_recommend pr on pr.party_id = op.party_id
        left join pcs_admin_report par on par.party_id = op.party_id and par.config_id=pr.config_id and par.stage=pr.stage
        <include refid="where_searchPcsPartyBeans"/>
        group by op.party_id
    </select>
    <select id="countPcsPartyBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct op.party_id) from pcs_party op
        left join pcs_recommend pr on pr.party_id = op.party_id
        left join pcs_admin_report par on par.party_id = op.party_id and par.config_id=pr.config_id and par.stage=pr.stage
        <include refid="where_searchPcsPartyBeans"/>
    </select>

    <!--党支部推荐汇总情况-->
    <resultMap id="BranchBaseResultMap" type="persistence.pcs.common.PcsBranchBean"
               extends="persistence.pcs.PcsBranchMapper.BaseResultMap">
        <result column="recommend_id" jdbcType="INTEGER" property="recommendId"/>
        <result column="stage" jdbcType="TINYINT" property="stage"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="is_finished" jdbcType="BIT" property="isFinished"/>
    </resultMap>
    <sql id="searchPcsBranchBeans">
        <where>
            pb.config_id = #{configId}
            <if test="partyId!=null">
                and pb.party_id=#{partyId}
            </if>
            <if test="branchId!=null">
                and pb.branch_id=#{branchId}
            </if>
            <if test="isFinished!=null">
                and pr.is_finished=#{isFinished}
            </if>
        </where>
    </sql>
    <!--党支部推荐汇总情况（含直属党支部）-->
    <select id="selectPcsBranchBeanList" resultMap="BranchBaseResultMap" parameterType="map">
        select pb.*, ${stage} as stage, pr.id as recommend_id,
               pr.expect_member_count, pr.actual_member_count, pr.is_finished from pcs_branch pb
        left join pcs_recommend pr on pr.stage=#{stage} and pr.config_id=pb.config_id
        and (pr.branch_id=pb.branch_id or (pb.is_direct_branch=1 and pb.party_id=pr.party_id))
        <include refid="searchPcsBranchBeans"/>
        -- order by pb.member_count desc, pb.party_id asc, pb.branch_id asc
        order by pb.sort_order
    </select>
    <select id="countPcsBranchBeanList" parameterType="map" resultType="java.lang.Integer">
        select count(*) from pcs_branch pb
        left join pcs_recommend pr on pr.stage=#{stage} and pr.config_id=pb.config_id
        and (pr.branch_id=pb.branch_id or (pb.is_direct_branch=1 and pb.party_id=pr.party_id))
        <include refid="searchPcsBranchBeans"/>
    </select>

    <resultMap id="CandidateBaseResultMap" type="persistence.pcs.common.IPcsCandidate"
               extends="persistence.pcs.PcsCandidateMapper.BaseResultMap">
        <result column="party_ids" jdbcType="VARCHAR" property="partyIds"/>
        <result column="branch_ids" jdbcType="VARCHAR" property="branchIds"/>
        <result column="branch_count" jdbcType="INTEGER" property="branchCount"/>
        <result column="member_count" jdbcType="INTEGER" property="memberCount"/>
        <result column="expect_member_count" jdbcType="INTEGER" property="expectMemberCount"/>
        <result column="actual_member_count" jdbcType="INTEGER" property="actualMemberCount"/>
        <result column="total_vote" jdbcType="INTEGER" property="totalVote"/>
        <result column="chosen_id" jdbcType="INTEGER" property="chosenId"/>
    </resultMap>

    <!-- 获取被推荐人都有哪些支部推荐了（除直属党支部，只统计已上报的党支部） -->
    <select id="selectCandidateBranchIds" resultType="int" parameterType="map">
        select pc.branch_id
        from pcs_candidate pc
          where pc.config_id=#{configId} and pc.stage=#{stage} and pc.type=#{candidateType}
            and pc.branch_id is not null and user_id=#{userId}
            and pc.party_id in (select party_id from pcs_admin_report where config_id=#{configId} and stage=#{stage})
    </select>

    <!--分党委每个被推荐人的情况（只统计已上报）-->
    <select id="selectPartyCandidateList" resultMap="CandidateBaseResultMap" parameterType="map">
        select pc.*, group_concat(distinct pc.party_id) as party_ids,group_concat(distinct pc.branch_id) as branch_ids,
        count( pc.id) as branch_count, sum(pc.vote) total_vote, sum(pr.expect_member_count) as expect_member_count,
        sum(pr.actual_member_count) as actual_member_count, sum(pb.member_count) as member_count, pcc.id as chosen_id,
        pcc.sort_order
        from pcs_candidate pc left join pcs_recommend pr on pr.id=pc.recommend_id

        left join pcs_branch pb on pc.branch_id=pb.branch_id or (pb.is_direct_branch=1 and pb.party_id=pc.party_id)

        left join pcs_candidate_chosen pcc on pc.config_id=pcc.config_id and pc.stage=pcc.stage and pc.type=pcc.type and
        pc.user_id=pcc.user_id

        left join pcs_admin_report par on par.config_id=pc.config_id and par.party_id=pc.party_id and par.stage=pc.stage
        <where>
            pc.config_id=#{configId} and pc.stage=#{stage} and pc.type=#{candidateType} and par.id>0
            <if test="userId!=null">
                and pc.user_id=#{userId}
            </if>
            <if test="isChosen">
                and pcc.id is not null
            </if>
        </where>
        group by pc.user_id
        order by
        <if test="isChosen">
            pcc.sort_order asc
        </if>
        <if test="isChosen==null or !isChosen">
            branch_count desc, FIND_IN_SET(pc.cadre_status, '6,4,1,3,0'), pc.cadre_sort_order desc, actual_member_count desc
        </if>
    </select>

    <select id="countPartyCandidateList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct pc.user_id) from pcs_candidate pc
        left join pcs_candidate_chosen pcc on pc.config_id=pcc.config_id
        and pc.stage=pcc.stage and pc.type=pcc.type and pc.user_id=pcc.user_id
        left join pcs_admin_report par on par.config_id=pc.config_id and par.party_id=pc.party_id and par.stage=pc.stage
        <where>
            pc.config_id=#{configId} and pc.stage=#{stage} and pc.type=#{candidateType} and par.id>0
            <if test="userId!=null">
                and pc.user_id=#{userId}
            </if>
            <if test="isChosen">
                and pcc.id is not null
            </if>
        </where>
    </select>

    <!--党支部每个被推荐人的情况-->
    <sql id="searchBranchCandidates">
        <where>
            <if test="userId!=null">
                and pc.user_id=#{userId}
            </if>
            and pc.config_id=#{configId} and pc.stage=#{stage} and pc.type=#{candidateType} and
            pc.party_id=#{partyId}
        </where>
    </sql>
    <select id="selectBranchCandidateList" resultMap="CandidateBaseResultMap" parameterType="map">
        select pc.*,
        group_concat(distinct pc.party_id) as party_ids,
        group_concat(pc.branch_id) as branch_ids,
        count(pc.id) as branch_count,
        sum(ifnull(prv.member_count,0)) as member_count,
        sum(ifnull(prv.expect_member_count, 0)) as expect_member_count,
        sum(ifnull(prv.actual_member_count, 0)) as actual_member_count,
        if(isnull(c.status), -1, c.status) as cadre_status
        from pcs_candidate pc
        left join (select pb.*, pr.expect_member_count, pr.actual_member_count, pr.is_finished from pcs_branch pb
        left join pcs_recommend pr on pr.config_id=#{configId} and pr.stage=#{stage} and (pr.branch_id=pb.branch_id or
        (pb.is_direct_branch=1 and pb.party_id=pr.party_id))) prv on
        prv.party_id=pc.party_id and
        (prv.is_direct_branch=1 or prv.branch_id=pc.branch_id)
        left join cadre c on c.user_id=pc.user_id
        <include refid="searchBranchCandidates"/>
        group by pc.user_id
        order by branch_count desc, FIND_IN_SET(cadre_status, '6,4,1,3,-1'), c.sort_order desc, actual_member_count desc
    </select>
    <select id="countBranchCandidateList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct pc.user_id) from pcs_candidate pc
        <include refid="searchBranchCandidates"/>
    </select>

    <!--selectRList_where和selectR1List_where用来添加搜索条件，为了使二下和三下中将名单中的结果和另选他人的结果合并，只是为了区别两张表-->
    <sql id="selectRList_where">

        <if test="type != null">
            and r.type = #{type}
        </if>
        <if test="isCandidate != null">
            and r.is_candidate = #{isCandidate}
        </if>
        <if test="userId != null">
            and r.user_id = #{userId}
        </if>
        <if test="partyId != null">
            and r.party_id = #{partyId}
        </if>
        <if test="branchId != null">
            and r.branch_id = #{branchId}
        </if>
        <if test="pollIdList != null and pollIdList.size > 0">
            and r.poll_id in
            <foreach collection="pollIdList" open="(" close = ")" item = "pollId" separator=",">
                #{pollId}
            </foreach>
        </if>
        <if test="pollIdList == null or pollIdList.size == 0">
            and r.poll_id is null
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)and(branchIdList != null and branchIdList.size > 0)">
            and r.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
            or r.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
        <if test="(partyIdList == null or partyIdList.size == 0)and(branchIdList != null and branchIdList.size > 0)">
            and r.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)and(branchIdList == null or branchIdList.size == 0)">
            and r.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
        </if>
    </sql>

    <sql id="selectR1List_where">

         and r1.status=2
        <if test="isCandidate != null">
            and r1.is_candidate = #{isCandidate}
        </if>
        <if test="type != null">
            and r1.type = #{type}
        </if>
        <if test="userId != null">
            and r1.user_id = #{userId}
        </if>
        <if test="partyId != null">
            and r1.party_id = #{partyId}
        </if>
        <if test="branchId != null">
            and r1.branch_id = #{branchId}
        </if>
        <if test="pollIdList != null and pollIdList.size > 0">
            and r1.poll_id in
            <foreach collection="pollIdList" open="(" close = ")" item = "pollId" separator=",">
                #{pollId}
            </foreach>
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)and(branchIdList != null and branchIdList.size > 0)">
            and r1.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
            or r1.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
        <if test="(partyIdList == null or partyIdList.size == 0)and(branchIdList != null and branchIdList.size > 0)">
            and r1.branch_id in
            <foreach collection="branchIdList" open="(" close = ")" item = "branchId" separator=",">
                #{branchId}
            </foreach>
        </if>
        <if test="(partyIdList != null and partyIdList.size > 0)and(branchIdList == null or branchIdList.size == 0)">
            and r1.party_id in
            <foreach collection="partyIdList" open="(" close = ")" item = "partyId" separator=",">
                #{partyId}
            </foreach>
        </if>
    </sql>

    <!--统计一下阶段的得票-->
    <select id="selectResultList" parameterType="map" resultType="persistence.pcs.common.PcsFinalResult">
        select r.poll_id as pollId, r.user_id as userId, r.type as type, ifnull(count(distinct branch_id), 1) as branchNum, sum(if(is_positive and status=1,1,0)) as positiveBallot,
        sum(If(status=1,1,0)) AS supportNum, sum(if(is_positive and status=1,0,1)) as growBallot, r.is_candidate as isCandidate from pcs_poll_result r
        <where>
            stage=#{stage}
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.user_id, r.is_candidate order by r.type desc, positiveBallot desc
    </select>

    <select id="countResult" parameterType="map" resultType="java.lang.Integer" >
        select count(*) from (select r.* from pcs_poll_result r
        <where>
            stage=#{stage}
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.user_id, r.is_candidate)tmp
    </select>

    <!--统计二下阶段的得票-->
    <select id="selectSecondResultList" parameterType="map" resultType="persistence.pcs.common.PcsFinalResult">
        select r.poll_id as pollId, r.candidate_user_id as userId, r.type as type,  sum(if(r.is_positive=1 and r.status=1,1,0)) as positiveBallot, ifnull(count(distinct r.branch_id), 1) as branchNum,
        sum(if(r.is_positive=0 and r.status=1,1,0)) as growBallot, sum(If(r.status=1,1,0)) AS supportNum, sum(if(r.status=2,1,0)) as notSupportNum, sum(if(r.status=3,1,0)) as notVoteNum, r.is_candidate as isCandidate from pcs_poll_result r
        <where>
            r.stage=#{stage}
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.candidate_user_id
        union all
        select r1.poll_id as pollId, r1.user_id as userId, r1.type as type,  sum(if(r1.is_positive=1 and r1.status=2,1,0)) as positiveBallot, ifnull(count(distinct r1.branch_id), 1) as branchNum,
        sum(if(r1.is_positive=0 and r1.status=2,1,0)) as growBallot, sum(If(r1.status=2,1,0)) AS supportNum, null as notSupportNum, null as notVoteNum, r1.is_candidate as isCandidate from pcs_poll_result r1
        <where>
            r1.stage=#{stage}
            <include refid="selectR1List_where"/>
        </where>
        group by r1.type, r1.user_id order by type desc, positiveBallot desc
    </select>

    <select id="countSecondResult" parameterType="map" resultType="java.lang.Integer" >
        select count(*) from (select r.candidate_user_id as user_id from pcs_poll_result r
        <where>
            r.stage=#{stage}
            <include refid="selectRList_where"/>
        </where>
        group by r.type, r.candidate_user_id
        union all
        select r1.user_id from pcs_poll_result r1
        <where>
            r1.stage=#{stage}
            <include refid="selectR1List_where"/>
        </where>
        group by r1.type, r1.user_id)tmp
    </select>
</mapper>