<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.pmd.PmdConfigMemberMapper">
  <resultMap id="BaseResultMap" type="domain.pmd.PmdConfigMember">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="config_member_type" jdbcType="TINYINT" property="configMemberType" />
    <result column="config_member_type_id" jdbcType="INTEGER" property="configMemberTypeId" />
    <result column="is_online_pay" jdbcType="BIT" property="isOnlinePay" />
    <result column="due_pay" jdbcType="DECIMAL" property="duePay" />
    <result column="has_salary" jdbcType="BIT" property="hasSalary" />
    <result column="has_reset" jdbcType="BIT" property="hasReset" />
    <result column="has_set_salary" jdbcType="BIT" property="hasSetSalary" />
    <result column="retire_salary" jdbcType="DECIMAL" property="retireSalary" />
    <result column="salary" jdbcType="VARCHAR" property="salary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, mobile, config_member_type, config_member_type_id, is_online_pay, due_pay, 
    has_salary, has_reset, has_set_salary, retire_salary, salary
  </sql>
  <select id="selectByExample" parameterType="domain.pmd.PmdConfigMemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pmd_config_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pmd_config_member
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pmd_config_member
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.pmd.PmdConfigMemberExample">
    delete from pmd_config_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.pmd.PmdConfigMember">
    insert into pmd_config_member (user_id, mobile, config_member_type, 
      config_member_type_id, is_online_pay, due_pay, 
      has_salary, has_reset, has_set_salary, 
      retire_salary, salary)
    values (#{userId,jdbcType=INTEGER}, #{mobile,jdbcType=VARCHAR}, #{configMemberType,jdbcType=TINYINT}, 
      #{configMemberTypeId,jdbcType=INTEGER}, #{isOnlinePay,jdbcType=BIT}, #{duePay,jdbcType=DECIMAL}, 
      #{hasSalary,jdbcType=BIT}, #{hasReset,jdbcType=BIT}, #{hasSetSalary,jdbcType=BIT}, 
      #{retireSalary,jdbcType=DECIMAL}, #{salary,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="domain.pmd.PmdConfigMember">
    insert into pmd_config_member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="configMemberType != null">
        config_member_type,
      </if>
      <if test="configMemberTypeId != null">
        config_member_type_id,
      </if>
      <if test="isOnlinePay != null">
        is_online_pay,
      </if>
      <if test="duePay != null">
        due_pay,
      </if>
      <if test="hasSalary != null">
        has_salary,
      </if>
      <if test="hasReset != null">
        has_reset,
      </if>
      <if test="hasSetSalary != null">
        has_set_salary,
      </if>
      <if test="retireSalary != null">
        retire_salary,
      </if>
      <if test="salary != null">
        salary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="configMemberType != null">
        #{configMemberType,jdbcType=TINYINT},
      </if>
      <if test="configMemberTypeId != null">
        #{configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="isOnlinePay != null">
        #{isOnlinePay,jdbcType=BIT},
      </if>
      <if test="duePay != null">
        #{duePay,jdbcType=DECIMAL},
      </if>
      <if test="hasSalary != null">
        #{hasSalary,jdbcType=BIT},
      </if>
      <if test="hasReset != null">
        #{hasReset,jdbcType=BIT},
      </if>
      <if test="hasSetSalary != null">
        #{hasSetSalary,jdbcType=BIT},
      </if>
      <if test="retireSalary != null">
        #{retireSalary,jdbcType=DECIMAL},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.pmd.PmdConfigMemberExample" resultType="java.lang.Long">
    select count(*) from pmd_config_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pmd_config_member
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.configMemberType != null">
        config_member_type = #{record.configMemberType,jdbcType=TINYINT},
      </if>
      <if test="record.configMemberTypeId != null">
        config_member_type_id = #{record.configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.isOnlinePay != null">
        is_online_pay = #{record.isOnlinePay,jdbcType=BIT},
      </if>
      <if test="record.duePay != null">
        due_pay = #{record.duePay,jdbcType=DECIMAL},
      </if>
      <if test="record.hasSalary != null">
        has_salary = #{record.hasSalary,jdbcType=BIT},
      </if>
      <if test="record.hasReset != null">
        has_reset = #{record.hasReset,jdbcType=BIT},
      </if>
      <if test="record.hasSetSalary != null">
        has_set_salary = #{record.hasSetSalary,jdbcType=BIT},
      </if>
      <if test="record.retireSalary != null">
        retire_salary = #{record.retireSalary,jdbcType=DECIMAL},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pmd_config_member
    set user_id = #{record.userId,jdbcType=INTEGER},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      config_member_type = #{record.configMemberType,jdbcType=TINYINT},
      config_member_type_id = #{record.configMemberTypeId,jdbcType=INTEGER},
      is_online_pay = #{record.isOnlinePay,jdbcType=BIT},
      due_pay = #{record.duePay,jdbcType=DECIMAL},
      has_salary = #{record.hasSalary,jdbcType=BIT},
      has_reset = #{record.hasReset,jdbcType=BIT},
      has_set_salary = #{record.hasSetSalary,jdbcType=BIT},
      retire_salary = #{record.retireSalary,jdbcType=DECIMAL},
      salary = #{record.salary,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.pmd.PmdConfigMember">
    update pmd_config_member
    <set>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="configMemberType != null">
        config_member_type = #{configMemberType,jdbcType=TINYINT},
      </if>
      <if test="configMemberTypeId != null">
        config_member_type_id = #{configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="isOnlinePay != null">
        is_online_pay = #{isOnlinePay,jdbcType=BIT},
      </if>
      <if test="duePay != null">
        due_pay = #{duePay,jdbcType=DECIMAL},
      </if>
      <if test="hasSalary != null">
        has_salary = #{hasSalary,jdbcType=BIT},
      </if>
      <if test="hasReset != null">
        has_reset = #{hasReset,jdbcType=BIT},
      </if>
      <if test="hasSetSalary != null">
        has_set_salary = #{hasSetSalary,jdbcType=BIT},
      </if>
      <if test="retireSalary != null">
        retire_salary = #{retireSalary,jdbcType=DECIMAL},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.pmd.PmdConfigMember">
    update pmd_config_member
    set mobile = #{mobile,jdbcType=VARCHAR},
      config_member_type = #{configMemberType,jdbcType=TINYINT},
      config_member_type_id = #{configMemberTypeId,jdbcType=INTEGER},
      is_online_pay = #{isOnlinePay,jdbcType=BIT},
      due_pay = #{duePay,jdbcType=DECIMAL},
      has_salary = #{hasSalary,jdbcType=BIT},
      has_reset = #{hasReset,jdbcType=BIT},
      has_set_salary = #{hasSetSalary,jdbcType=BIT},
      retire_salary = #{retireSalary,jdbcType=DECIMAL},
      salary = #{salary,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.pmd.PmdConfigMemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pmd_config_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>