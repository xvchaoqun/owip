<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.pmd.PmdMemberMapper">
  <resultMap id="BaseResultMap" type="domain.pmd.PmdMember">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="month_id" jdbcType="INTEGER" property="monthId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="pay_month" jdbcType="DATE" property="payMonth" />
    <result column="party_id" jdbcType="INTEGER" property="partyId" />
    <result column="branch_id" jdbcType="INTEGER" property="branchId" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="config_member_type_id" jdbcType="INTEGER" property="configMemberTypeId" />
    <result column="config_member_type_name" jdbcType="VARCHAR" property="configMemberTypeName" />
    <result column="config_member_type_norm_id" jdbcType="INTEGER" property="configMemberTypeNormId" />
    <result column="config_member_type_norm_name" jdbcType="VARCHAR" property="configMemberTypeNormName" />
    <result column="config_member_due_pay" jdbcType="DECIMAL" property="configMemberDuePay" />
    <result column="need_set_salary" jdbcType="BIT" property="needSetSalary" />
    <result column="has_salary" jdbcType="BIT" property="hasSalary" />
    <result column="talent_title" jdbcType="VARCHAR" property="talentTitle" />
    <result column="post_class" jdbcType="VARCHAR" property="postClass" />
    <result column="main_post_level" jdbcType="VARCHAR" property="mainPostLevel" />
    <result column="pro_post_level" jdbcType="VARCHAR" property="proPostLevel" />
    <result column="manage_level" jdbcType="VARCHAR" property="manageLevel" />
    <result column="office_level" jdbcType="VARCHAR" property="officeLevel" />
    <result column="authorized_type" jdbcType="VARCHAR" property="authorizedType" />
    <result column="staff_type" jdbcType="VARCHAR" property="staffType" />
    <result column="salary" jdbcType="DECIMAL" property="salary" />
    <result column="norm_id" jdbcType="INTEGER" property="normId" />
    <result column="norm_value_id" jdbcType="INTEGER" property="normValueId" />
    <result column="due_pay_reason" jdbcType="VARCHAR" property="duePayReason" />
    <result column="due_pay" jdbcType="DECIMAL" property="duePay" />
    <result column="real_pay" jdbcType="DECIMAL" property="realPay" />
    <result column="is_delay" jdbcType="BIT" property="isDelay" />
    <result column="delay_reason" jdbcType="VARCHAR" property="delayReason" />
    <result column="has_pay" jdbcType="BIT" property="hasPay" />
    <result column="is_self_pay" jdbcType="BIT" property="isSelfPay" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="charge_user_id" jdbcType="INTEGER" property="chargeUserId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, month_id, user_id, pay_month, party_id, branch_id, type, config_member_type_id, 
    config_member_type_name, config_member_type_norm_id, config_member_type_norm_name, 
    config_member_due_pay, need_set_salary, has_salary, talent_title, post_class, main_post_level, 
    pro_post_level, manage_level, office_level, authorized_type, staff_type, salary, 
    norm_id, norm_value_id, due_pay_reason, due_pay, real_pay, is_delay, delay_reason, 
    has_pay, is_self_pay, pay_time, charge_user_id
  </sql>
  <select id="selectByExample" parameterType="domain.pmd.PmdMemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pmd_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pmd_member
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pmd_member
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.pmd.PmdMemberExample">
    delete from pmd_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.pmd.PmdMember">
    insert into pmd_member (id, month_id, user_id, 
      pay_month, party_id, branch_id, 
      type, config_member_type_id, config_member_type_name, 
      config_member_type_norm_id, config_member_type_norm_name, 
      config_member_due_pay, need_set_salary, has_salary, 
      talent_title, post_class, main_post_level, 
      pro_post_level, manage_level, office_level, 
      authorized_type, staff_type, salary, 
      norm_id, norm_value_id, due_pay_reason, 
      due_pay, real_pay, is_delay, 
      delay_reason, has_pay, is_self_pay, 
      pay_time, charge_user_id)
    values (#{id,jdbcType=INTEGER}, #{monthId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{payMonth,jdbcType=DATE}, #{partyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, 
      #{type,jdbcType=TINYINT}, #{configMemberTypeId,jdbcType=INTEGER}, #{configMemberTypeName,jdbcType=VARCHAR}, 
      #{configMemberTypeNormId,jdbcType=INTEGER}, #{configMemberTypeNormName,jdbcType=VARCHAR}, 
      #{configMemberDuePay,jdbcType=DECIMAL}, #{needSetSalary,jdbcType=BIT}, #{hasSalary,jdbcType=BIT}, 
      #{talentTitle,jdbcType=VARCHAR}, #{postClass,jdbcType=VARCHAR}, #{mainPostLevel,jdbcType=VARCHAR}, 
      #{proPostLevel,jdbcType=VARCHAR}, #{manageLevel,jdbcType=VARCHAR}, #{officeLevel,jdbcType=VARCHAR}, 
      #{authorizedType,jdbcType=VARCHAR}, #{staffType,jdbcType=VARCHAR}, #{salary,jdbcType=DECIMAL}, 
      #{normId,jdbcType=INTEGER}, #{normValueId,jdbcType=INTEGER}, #{duePayReason,jdbcType=VARCHAR}, 
      #{duePay,jdbcType=DECIMAL}, #{realPay,jdbcType=DECIMAL}, #{isDelay,jdbcType=BIT}, 
      #{delayReason,jdbcType=VARCHAR}, #{hasPay,jdbcType=BIT}, #{isSelfPay,jdbcType=BIT}, 
      #{payTime,jdbcType=TIMESTAMP}, #{chargeUserId,jdbcType=INTEGER})
  </insert>
  <insert keyProperty="id" id="insertSelective" parameterType="domain.pmd.PmdMember">
    insert into pmd_member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="monthId != null">
        month_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="payMonth != null">
        pay_month,
      </if>
      <if test="partyId != null">
        party_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="configMemberTypeId != null">
        config_member_type_id,
      </if>
      <if test="configMemberTypeName != null">
        config_member_type_name,
      </if>
      <if test="configMemberTypeNormId != null">
        config_member_type_norm_id,
      </if>
      <if test="configMemberTypeNormName != null">
        config_member_type_norm_name,
      </if>
      <if test="configMemberDuePay != null">
        config_member_due_pay,
      </if>
      <if test="needSetSalary != null">
        need_set_salary,
      </if>
      <if test="hasSalary != null">
        has_salary,
      </if>
      <if test="talentTitle != null">
        talent_title,
      </if>
      <if test="postClass != null">
        post_class,
      </if>
      <if test="mainPostLevel != null">
        main_post_level,
      </if>
      <if test="proPostLevel != null">
        pro_post_level,
      </if>
      <if test="manageLevel != null">
        manage_level,
      </if>
      <if test="officeLevel != null">
        office_level,
      </if>
      <if test="authorizedType != null">
        authorized_type,
      </if>
      <if test="staffType != null">
        staff_type,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="normId != null">
        norm_id,
      </if>
      <if test="normValueId != null">
        norm_value_id,
      </if>
      <if test="duePayReason != null">
        due_pay_reason,
      </if>
      <if test="duePay != null">
        due_pay,
      </if>
      <if test="realPay != null">
        real_pay,
      </if>
      <if test="isDelay != null">
        is_delay,
      </if>
      <if test="delayReason != null">
        delay_reason,
      </if>
      <if test="hasPay != null">
        has_pay,
      </if>
      <if test="isSelfPay != null">
        is_self_pay,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="chargeUserId != null">
        charge_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="monthId != null">
        #{monthId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="payMonth != null">
        #{payMonth,jdbcType=DATE},
      </if>
      <if test="partyId != null">
        #{partyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="configMemberTypeId != null">
        #{configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="configMemberTypeName != null">
        #{configMemberTypeName,jdbcType=VARCHAR},
      </if>
      <if test="configMemberTypeNormId != null">
        #{configMemberTypeNormId,jdbcType=INTEGER},
      </if>
      <if test="configMemberTypeNormName != null">
        #{configMemberTypeNormName,jdbcType=VARCHAR},
      </if>
      <if test="configMemberDuePay != null">
        #{configMemberDuePay,jdbcType=DECIMAL},
      </if>
      <if test="needSetSalary != null">
        #{needSetSalary,jdbcType=BIT},
      </if>
      <if test="hasSalary != null">
        #{hasSalary,jdbcType=BIT},
      </if>
      <if test="talentTitle != null">
        #{talentTitle,jdbcType=VARCHAR},
      </if>
      <if test="postClass != null">
        #{postClass,jdbcType=VARCHAR},
      </if>
      <if test="mainPostLevel != null">
        #{mainPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="proPostLevel != null">
        #{proPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        #{manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="officeLevel != null">
        #{officeLevel,jdbcType=VARCHAR},
      </if>
      <if test="authorizedType != null">
        #{authorizedType,jdbcType=VARCHAR},
      </if>
      <if test="staffType != null">
        #{staffType,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=DECIMAL},
      </if>
      <if test="normId != null">
        #{normId,jdbcType=INTEGER},
      </if>
      <if test="normValueId != null">
        #{normValueId,jdbcType=INTEGER},
      </if>
      <if test="duePayReason != null">
        #{duePayReason,jdbcType=VARCHAR},
      </if>
      <if test="duePay != null">
        #{duePay,jdbcType=DECIMAL},
      </if>
      <if test="realPay != null">
        #{realPay,jdbcType=DECIMAL},
      </if>
      <if test="isDelay != null">
        #{isDelay,jdbcType=BIT},
      </if>
      <if test="delayReason != null">
        #{delayReason,jdbcType=VARCHAR},
      </if>
      <if test="hasPay != null">
        #{hasPay,jdbcType=BIT},
      </if>
      <if test="isSelfPay != null">
        #{isSelfPay,jdbcType=BIT},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeUserId != null">
        #{chargeUserId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.pmd.PmdMemberExample" resultType="java.lang.Long">
    select count(*) from pmd_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update pmd_member
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.monthId != null">
        month_id = #{record.monthId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.payMonth != null">
        pay_month = #{record.payMonth,jdbcType=DATE},
      </if>
      <if test="record.partyId != null">
        party_id = #{record.partyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.configMemberTypeId != null">
        config_member_type_id = #{record.configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.configMemberTypeName != null">
        config_member_type_name = #{record.configMemberTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.configMemberTypeNormId != null">
        config_member_type_norm_id = #{record.configMemberTypeNormId,jdbcType=INTEGER},
      </if>
      <if test="record.configMemberTypeNormName != null">
        config_member_type_norm_name = #{record.configMemberTypeNormName,jdbcType=VARCHAR},
      </if>
      <if test="record.configMemberDuePay != null">
        config_member_due_pay = #{record.configMemberDuePay,jdbcType=DECIMAL},
      </if>
      <if test="record.needSetSalary != null">
        need_set_salary = #{record.needSetSalary,jdbcType=BIT},
      </if>
      <if test="record.hasSalary != null">
        has_salary = #{record.hasSalary,jdbcType=BIT},
      </if>
      <if test="record.talentTitle != null">
        talent_title = #{record.talentTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.postClass != null">
        post_class = #{record.postClass,jdbcType=VARCHAR},
      </if>
      <if test="record.mainPostLevel != null">
        main_post_level = #{record.mainPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.proPostLevel != null">
        pro_post_level = #{record.proPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.manageLevel != null">
        manage_level = #{record.manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.officeLevel != null">
        office_level = #{record.officeLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.authorizedType != null">
        authorized_type = #{record.authorizedType,jdbcType=VARCHAR},
      </if>
      <if test="record.staffType != null">
        staff_type = #{record.staffType,jdbcType=VARCHAR},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=DECIMAL},
      </if>
      <if test="record.normId != null">
        norm_id = #{record.normId,jdbcType=INTEGER},
      </if>
      <if test="record.normValueId != null">
        norm_value_id = #{record.normValueId,jdbcType=INTEGER},
      </if>
      <if test="record.duePayReason != null">
        due_pay_reason = #{record.duePayReason,jdbcType=VARCHAR},
      </if>
      <if test="record.duePay != null">
        due_pay = #{record.duePay,jdbcType=DECIMAL},
      </if>
      <if test="record.realPay != null">
        real_pay = #{record.realPay,jdbcType=DECIMAL},
      </if>
      <if test="record.isDelay != null">
        is_delay = #{record.isDelay,jdbcType=BIT},
      </if>
      <if test="record.delayReason != null">
        delay_reason = #{record.delayReason,jdbcType=VARCHAR},
      </if>
      <if test="record.hasPay != null">
        has_pay = #{record.hasPay,jdbcType=BIT},
      </if>
      <if test="record.isSelfPay != null">
        is_self_pay = #{record.isSelfPay,jdbcType=BIT},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.chargeUserId != null">
        charge_user_id = #{record.chargeUserId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update pmd_member
    set id = #{record.id,jdbcType=INTEGER},
      month_id = #{record.monthId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      pay_month = #{record.payMonth,jdbcType=DATE},
      party_id = #{record.partyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT},
      config_member_type_id = #{record.configMemberTypeId,jdbcType=INTEGER},
      config_member_type_name = #{record.configMemberTypeName,jdbcType=VARCHAR},
      config_member_type_norm_id = #{record.configMemberTypeNormId,jdbcType=INTEGER},
      config_member_type_norm_name = #{record.configMemberTypeNormName,jdbcType=VARCHAR},
      config_member_due_pay = #{record.configMemberDuePay,jdbcType=DECIMAL},
      need_set_salary = #{record.needSetSalary,jdbcType=BIT},
      has_salary = #{record.hasSalary,jdbcType=BIT},
      talent_title = #{record.talentTitle,jdbcType=VARCHAR},
      post_class = #{record.postClass,jdbcType=VARCHAR},
      main_post_level = #{record.mainPostLevel,jdbcType=VARCHAR},
      pro_post_level = #{record.proPostLevel,jdbcType=VARCHAR},
      manage_level = #{record.manageLevel,jdbcType=VARCHAR},
      office_level = #{record.officeLevel,jdbcType=VARCHAR},
      authorized_type = #{record.authorizedType,jdbcType=VARCHAR},
      staff_type = #{record.staffType,jdbcType=VARCHAR},
      salary = #{record.salary,jdbcType=DECIMAL},
      norm_id = #{record.normId,jdbcType=INTEGER},
      norm_value_id = #{record.normValueId,jdbcType=INTEGER},
      due_pay_reason = #{record.duePayReason,jdbcType=VARCHAR},
      due_pay = #{record.duePay,jdbcType=DECIMAL},
      real_pay = #{record.realPay,jdbcType=DECIMAL},
      is_delay = #{record.isDelay,jdbcType=BIT},
      delay_reason = #{record.delayReason,jdbcType=VARCHAR},
      has_pay = #{record.hasPay,jdbcType=BIT},
      is_self_pay = #{record.isSelfPay,jdbcType=BIT},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      charge_user_id = #{record.chargeUserId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.pmd.PmdMember">
    update pmd_member
    <set>
      <if test="monthId != null">
        month_id = #{monthId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="payMonth != null">
        pay_month = #{payMonth,jdbcType=DATE},
      </if>
      <if test="partyId != null">
        party_id = #{partyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        branch_id = #{branchId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="configMemberTypeId != null">
        config_member_type_id = #{configMemberTypeId,jdbcType=INTEGER},
      </if>
      <if test="configMemberTypeName != null">
        config_member_type_name = #{configMemberTypeName,jdbcType=VARCHAR},
      </if>
      <if test="configMemberTypeNormId != null">
        config_member_type_norm_id = #{configMemberTypeNormId,jdbcType=INTEGER},
      </if>
      <if test="configMemberTypeNormName != null">
        config_member_type_norm_name = #{configMemberTypeNormName,jdbcType=VARCHAR},
      </if>
      <if test="configMemberDuePay != null">
        config_member_due_pay = #{configMemberDuePay,jdbcType=DECIMAL},
      </if>
      <if test="needSetSalary != null">
        need_set_salary = #{needSetSalary,jdbcType=BIT},
      </if>
      <if test="hasSalary != null">
        has_salary = #{hasSalary,jdbcType=BIT},
      </if>
      <if test="talentTitle != null">
        talent_title = #{talentTitle,jdbcType=VARCHAR},
      </if>
      <if test="postClass != null">
        post_class = #{postClass,jdbcType=VARCHAR},
      </if>
      <if test="mainPostLevel != null">
        main_post_level = #{mainPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="proPostLevel != null">
        pro_post_level = #{proPostLevel,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        manage_level = #{manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="officeLevel != null">
        office_level = #{officeLevel,jdbcType=VARCHAR},
      </if>
      <if test="authorizedType != null">
        authorized_type = #{authorizedType,jdbcType=VARCHAR},
      </if>
      <if test="staffType != null">
        staff_type = #{staffType,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=DECIMAL},
      </if>
      <if test="normId != null">
        norm_id = #{normId,jdbcType=INTEGER},
      </if>
      <if test="normValueId != null">
        norm_value_id = #{normValueId,jdbcType=INTEGER},
      </if>
      <if test="duePayReason != null">
        due_pay_reason = #{duePayReason,jdbcType=VARCHAR},
      </if>
      <if test="duePay != null">
        due_pay = #{duePay,jdbcType=DECIMAL},
      </if>
      <if test="realPay != null">
        real_pay = #{realPay,jdbcType=DECIMAL},
      </if>
      <if test="isDelay != null">
        is_delay = #{isDelay,jdbcType=BIT},
      </if>
      <if test="delayReason != null">
        delay_reason = #{delayReason,jdbcType=VARCHAR},
      </if>
      <if test="hasPay != null">
        has_pay = #{hasPay,jdbcType=BIT},
      </if>
      <if test="isSelfPay != null">
        is_self_pay = #{isSelfPay,jdbcType=BIT},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeUserId != null">
        charge_user_id = #{chargeUserId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.pmd.PmdMember">
    update pmd_member
    set month_id = #{monthId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      pay_month = #{payMonth,jdbcType=DATE},
      party_id = #{partyId,jdbcType=INTEGER},
      branch_id = #{branchId,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      config_member_type_id = #{configMemberTypeId,jdbcType=INTEGER},
      config_member_type_name = #{configMemberTypeName,jdbcType=VARCHAR},
      config_member_type_norm_id = #{configMemberTypeNormId,jdbcType=INTEGER},
      config_member_type_norm_name = #{configMemberTypeNormName,jdbcType=VARCHAR},
      config_member_due_pay = #{configMemberDuePay,jdbcType=DECIMAL},
      need_set_salary = #{needSetSalary,jdbcType=BIT},
      has_salary = #{hasSalary,jdbcType=BIT},
      talent_title = #{talentTitle,jdbcType=VARCHAR},
      post_class = #{postClass,jdbcType=VARCHAR},
      main_post_level = #{mainPostLevel,jdbcType=VARCHAR},
      pro_post_level = #{proPostLevel,jdbcType=VARCHAR},
      manage_level = #{manageLevel,jdbcType=VARCHAR},
      office_level = #{officeLevel,jdbcType=VARCHAR},
      authorized_type = #{authorizedType,jdbcType=VARCHAR},
      staff_type = #{staffType,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=DECIMAL},
      norm_id = #{normId,jdbcType=INTEGER},
      norm_value_id = #{normValueId,jdbcType=INTEGER},
      due_pay_reason = #{duePayReason,jdbcType=VARCHAR},
      due_pay = #{duePay,jdbcType=DECIMAL},
      real_pay = #{realPay,jdbcType=DECIMAL},
      is_delay = #{isDelay,jdbcType=BIT},
      delay_reason = #{delayReason,jdbcType=VARCHAR},
      has_pay = #{hasPay,jdbcType=BIT},
      is_self_pay = #{isSelfPay,jdbcType=BIT},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      charge_user_id = #{chargeUserId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.pmd.PmdMemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pmd_member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>