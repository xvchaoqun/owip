<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.member.MemberApplyViewMapper">
  <resultMap id="BaseResultMap" type="domain.member.MemberApplyView">
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="party_id" jdbcType="INTEGER" property="partyId" />
    <result column="branch_id" jdbcType="INTEGER" property="branchId" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="apply_time" jdbcType="DATE" property="applyTime" />
    <result column="fill_time" jdbcType="TIMESTAMP" property="fillTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="stage" jdbcType="TINYINT" property="stage" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="pass_time" jdbcType="DATE" property="passTime" />
    <result column="active_time" jdbcType="DATE" property="activeTime" />
    <result column="active_train_start_time" jdbcType="DATE" property="activeTrainStartTime" />
    <result column="active_train_end_time" jdbcType="DATE" property="activeTrainEndTime" />
    <result column="active_grade" jdbcType="VARCHAR" property="activeGrade" />
    <result column="candidate_time" jdbcType="DATE" property="candidateTime" />
    <result column="candidate_train_start_time" jdbcType="DATE" property="candidateTrainStartTime" />
    <result column="candidate_train_end_time" jdbcType="DATE" property="candidateTrainEndTime" />
    <result column="candidate_grade" jdbcType="VARCHAR" property="candidateGrade" />
    <result column="candidate_status" jdbcType="TINYINT" property="candidateStatus" />
    <result column="plan_time" jdbcType="DATE" property="planTime" />
    <result column="plan_status" jdbcType="TINYINT" property="planStatus" />
    <result column="draw_time" jdbcType="DATE" property="drawTime" />
    <result column="draw_status" jdbcType="TINYINT" property="drawStatus" />
    <result column="apply_sn_id" jdbcType="INTEGER" property="applySnId" />
    <result column="apply_sn" jdbcType="VARCHAR" property="applySn" />
    <result column="grow_public_id" jdbcType="INTEGER" property="growPublicId" />
    <result column="grow_time" jdbcType="DATE" property="growTime" />
    <result column="grow_status" jdbcType="TINYINT" property="growStatus" />
    <result column="positive_public_id" jdbcType="INTEGER" property="positivePublicId" />
    <result column="positive_time" jdbcType="DATE" property="positiveTime" />
    <result column="positive_status" jdbcType="TINYINT" property="positiveStatus" />
    <result column="is_remove" jdbcType="BIT" property="isRemove" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="_status" jdbcType="TINYINT" property="status" />
    <result column="member_status" jdbcType="INTEGER" property="memberStatus" />
    <result column="party_sort_order" jdbcType="INTEGER" property="partySortOrder" />
    <result column="branch_sort_order" jdbcType="INTEGER" property="branchSortOrder" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, party_id, branch_id, type, apply_time, fill_time, remark, stage, reason, 
    pass_time, active_time, active_train_start_time, active_train_end_time, active_grade, 
    candidate_time, candidate_train_start_time, candidate_train_end_time, candidate_grade, 
    candidate_status, plan_time, plan_status, draw_time, draw_status, apply_sn_id, apply_sn, 
    grow_public_id, grow_time, grow_status, positive_public_id, positive_time, positive_status, 
    is_remove, create_time, _status, member_status, party_sort_order, branch_sort_order
  </sql>
  <select id="selectByExample" parameterType="domain.member.MemberApplyViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_apply_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="countByExample" parameterType="domain.member.MemberApplyViewExample" resultType="java.lang.Long">
    select count(*) from ow_member_apply_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByExampleWithRowbounds" parameterType="domain.member.MemberApplyViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_apply_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>