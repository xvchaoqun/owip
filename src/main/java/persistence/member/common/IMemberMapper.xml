<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.member.common.IMemberMapper">

    <select id="findMembers"  resultMap="persistence.member.MemberViewMapper.BaseResultMap" parameterType="map">
        select * from ow_member_view where realname=#{realname}
            <if test="statusList.size>0">
            and status in
                <foreach collection="statusList" item="stat"
                         index="index" open="(" close=")" separator=",">
                    #{stat}
                </foreach>
            </if>
        <if test="politicalStatus!=null">
            and political_status =#{politicalStatus}
        </if>
        <if test="userType!=null">
            and user_type =#{userType}
        </if>
    </select>

    <sql id="member_selects_permits">
        <if test="addPermits">
            <if test="adminPartyIdList.size>0 and adminBranchIdList.size>0">
                and (
                party_id in
                <foreach collection="adminPartyIdList" item="partyId"
                         index="index" open="(" close=")" separator=",">
                    #{partyId}
                </foreach>
                or
                branch_id in
                <foreach collection="adminBranchIdList" item="branchId"
                         index="index" open="(" close=")" separator=",">
                    #{branchId}
                </foreach>
                )
            </if>
            <if test="adminPartyIdList.size>0 and adminBranchIdList.size==0">
                and party_id in
                <foreach collection="adminPartyIdList" item="partyId"
                         index="index" open="(" close=")" separator=",">
                    #{partyId}
                </foreach>
            </if>
            <if test="adminPartyIdList.size==0 and adminBranchIdList.size>0">
                and  branch_id in
                <foreach collection="adminBranchIdList" item="branchId"
                         index="index" open="(" close=")" separator=",">
                    #{branchId}
                </foreach>
            </if>
            <if test="adminPartyIdList.size==0 and adminBranchIdList.size==0">
                and m.user_id is null
            </if>
        </if>
    </sql>

    <select id="selectMemberInflowList" resultMap="persistence.member.MemberInflowMapper.BaseResultMap"
            parameterType="map">
        select m.* from ow_member_inflow m, sys_user_view user where m.user_id= user.id

        <if test="inflowStatus!=null">
            and m.inflow_status =#{inflowStatus}
        </if>
        <if test="hasOutApply!=null">
            <if test="hasOutApply">
                and m.out_status in(0,1,2)
            </if>
            <if test="!hasOutApply">
                and (m.out_status is null or m.out_status=-1)
            </if>
        </if>
        <include refid="member_selects_permits"/>
        <if test="search != null">
            and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
        </if>
        order by m.flow_time desc
    </select>
    <select id="countMemberInflowList" parameterType="map" resultType="java.lang.Integer">
        select count(m.user_id) from ow_member_inflow m, sys_user_view user where m.user_id= user.id

        <if test="inflowStatus!=null">
            and m.inflow_status =#{inflowStatus}
        </if>
        <if test="hasOutApply!=null">
            <if test="hasOutApply">
                and m.out_status in(0,1,2)
            </if>
            <if test="!hasOutApply">
                and (m.out_status is null or m.out_status=-1)
            </if>
        </if>
        <include refid="member_selects_permits"/>
        <if test="search != null">
            and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
        </if>
    </select>

    <select id="selectMemberApplyCount" parameterType="map" resultType="persistence.member.common.MemberApplyCount">
        select if(user_type in(1,5), 1, 2) as type, stage , count(*) as num from ow_member_apply_view m where m.member_status=0 and m.is_remove=0
        <include refid="member_selects_permits"/>
        group by type, stage
    </select>

    <select id="selectMemberTeacherCount" parameterType="map" resultType="map">
        select sum(if(status=1 and m.user_type=1, 1, 0)) as teacher_normalCount,
        sum(if(status=1 and m.user_type=5, 1, 0)) as teacher_retireCount,
        sum(if(status=4, 1, 0)) as teacher_transferCount, sum(if(status=1 or status=4, 1, 0)) total from ow_member_view m
        where m.user_type in(1,5)
        <include refid="member_selects_permits"/>
    </select>

    <select id="selectMemberStudentCount" parameterType="map" resultType="map">
        select sum(if(status=1, 1, 0)) as student_normalCount, sum(if(status=4, 1, 0)) as student_transferCount from ow_member_view m
        where m.user_type in(2,3,4)
        <if test="userType != null">
            and m.user_type=#{userType}
        </if>
        <include refid="member_selects_permits"/>
    </select>

    <sql id="userSearchSql">
        select * from sys_user_view
        <if test="query != null">
            <where>
                and username like '${query}%'
            </where>
            union
            select * from sys_user_view
            <where>
                and realname like '${query}%'
            </where>
            union
            select * from sys_user_view
            <where>
                and code like '${query}%'
            </where>
        </if>
    </sql>

    <select id="selectNotMemberList" resultMap="persistence.sys.SysUserViewMapper.BaseResultMap" parameterType="map">
        select * from (<include refid="userSearchSql" />) u
        where not exists(select 1 from ow_member m left join ow_party p on p.id = m.party_id
        left join ow_branch b on b.id = m.branch_id  where m.user_id=u.id and m.status=1 and p.is_deleted=0 and b.is_deleted=0)
        and role_ids not like "%${regRoleStr}%"
        order by create_time desc
    </select>
    <select id="countNotMemberList" parameterType="map" resultType="java.lang.Integer">
        select count(id) from (<include refid="userSearchSql" />) u
        where not exists(select 1 from ow_member where user_id=u.id and status=1)
        and role_ids not like "%${regRoleStr}%"
    </select>

    <update id="changeMemberParty" parameterType="map">
        update ow_member
        set
        party_id = #{partyId,jdbcType=INTEGER},
        branch_id = #{branchId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="persistence.member.MemberMapper.Update_By_Example_Where_Clause"/>
        </if>
    </update>

    <update id="increasePrintCount" parameterType="map">
        update ${tableName}
        set
        print_count = print_count + 1,
        last_print_time = #{lastPrintTime},
        last_print_user_id = #{lastPrintUserId}
        where id in
        <foreach collection="idList" item="_id"
                 index="index" open="(" close=")" separator=",">
            #{_id}
        </foreach>
    </update>

    <select id="countMemberNotIntegrity" parameterType="map" resultType="map">

        select count(case when user_type in(2,3,4) then 1
        else null end) as student,
        count(case when user_type=1 then 1
        else null end) as teacher,
        count(case when user_type=5 then 1
        else null end)as retire
        from ow_member_view where status = 1
        <if test="partyId != null">
            and party_id =#{partyId}
        </if>
        <if test="branchId != null">
            and branch_id =#{branchId}
        </if>
        and integrity != 1;
    </select>

    <select id="getPbMemberSelects" resultType="int" parameterType="map">
       select user_id from ow_party_member_view
       where
        is_history=0 and is_deleted=0 and(post_id=64 or  post_id=63)
        <if test="partyId != null">
            and  group_party_id=#{partyId}
        </if>
      union select user_id from ow_branch_member_view
        where  is_history=0 and is_deleted=0 and find_in_set(80, types)
            <if test="partyId != null">
                and  group_party_id=#{partyId}
            </if>

    </select>

    <select id="countMemberIn" resultType="int" parameterType="map">
        select count(*) coun
        from ow_member_in WHERE STATUS IN (2) and date_format(handle_time, '%Y-%m')=#{month}
        <if test="partyId != null">
            and party_id=#{partyId}
        </if>
    </select>

    <select id="countMemberOut" resultType="int" parameterType="map">
        select count(*) coun
        from ow_member_out WHERE STATUS IN (2,10) and date_format(handle_time, '%Y-%m')=#{month}
        <if test="partyId != null">
            and party_id=#{partyId}
        </if>
    </select>
</mapper>