<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.member.MemberInflowMapper">
  <resultMap id="BaseResultMap" type="domain.member.MemberInflow">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="party_name" jdbcType="VARCHAR" property="partyName" />
    <result column="branch_name" jdbcType="VARCHAR" property="branchName" />
    <result column="party_id" jdbcType="INTEGER" property="partyId" />
    <result column="branch_id" jdbcType="INTEGER" property="branchId" />
    <result column="original_job" jdbcType="INTEGER" property="originalJob" />
    <result column="province" jdbcType="INTEGER" property="province" />
    <result column="has_papers" jdbcType="BIT" property="hasPapers" />
    <result column="flow_time" jdbcType="DATE" property="flowTime" />
    <result column="flow_reason" jdbcType="VARCHAR" property="flowReason" />
    <result column="grow_time" jdbcType="DATE" property="growTime" />
    <result column="or_location" jdbcType="VARCHAR" property="orLocation" />
    <result column="inflow_status" jdbcType="TINYINT" property="inflowStatus" />
    <result column="is_back" jdbcType="BIT" property="isBack" />
    <result column="out_unit" jdbcType="VARCHAR" property="outUnit" />
    <result column="out_location" jdbcType="INTEGER" property="outLocation" />
    <result column="out_time" jdbcType="DATE" property="outTime" />
    <result column="out_status" jdbcType="TINYINT" property="outStatus" />
    <result column="out_is_back" jdbcType="BIT" property="outIsBack" />
    <result column="out_reason" jdbcType="VARCHAR" property="outReason" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, party_name, branch_name, party_id, branch_id, original_job, province, 
    has_papers, flow_time, flow_reason, grow_time, or_location, inflow_status, is_back, 
    out_unit, out_location, out_time, out_status, out_is_back, out_reason, reason, create_time
  </sql>
  <select id="selectByExample" parameterType="domain.member.MemberInflowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_inflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ow_member_inflow
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ow_member_inflow
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.member.MemberInflowExample">
    delete from ow_member_inflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.member.MemberInflow">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ow_member_inflow (user_id, party_name, branch_name, 
      party_id, branch_id, original_job, 
      province, has_papers, flow_time, 
      flow_reason, grow_time, or_location, 
      inflow_status, is_back, out_unit, 
      out_location, out_time, out_status, 
      out_is_back, out_reason, reason, 
      create_time)
    values (#{userId,jdbcType=INTEGER}, #{partyName,jdbcType=VARCHAR}, #{branchName,jdbcType=VARCHAR}, 
      #{partyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, #{originalJob,jdbcType=INTEGER}, 
      #{province,jdbcType=INTEGER}, #{hasPapers,jdbcType=BIT}, #{flowTime,jdbcType=DATE}, 
      #{flowReason,jdbcType=VARCHAR}, #{growTime,jdbcType=DATE}, #{orLocation,jdbcType=VARCHAR}, 
      #{inflowStatus,jdbcType=TINYINT}, #{isBack,jdbcType=BIT}, #{outUnit,jdbcType=VARCHAR}, 
      #{outLocation,jdbcType=INTEGER}, #{outTime,jdbcType=DATE}, #{outStatus,jdbcType=TINYINT}, 
      #{outIsBack,jdbcType=BIT}, #{outReason,jdbcType=VARCHAR}, #{reason,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="domain.member.MemberInflow">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ow_member_inflow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="partyName != null">
        party_name,
      </if>
      <if test="branchName != null">
        branch_name,
      </if>
      <if test="partyId != null">
        party_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="originalJob != null">
        original_job,
      </if>
      <if test="province != null">
        province,
      </if>
      <if test="hasPapers != null">
        has_papers,
      </if>
      <if test="flowTime != null">
        flow_time,
      </if>
      <if test="flowReason != null">
        flow_reason,
      </if>
      <if test="growTime != null">
        grow_time,
      </if>
      <if test="orLocation != null">
        or_location,
      </if>
      <if test="inflowStatus != null">
        inflow_status,
      </if>
      <if test="isBack != null">
        is_back,
      </if>
      <if test="outUnit != null">
        out_unit,
      </if>
      <if test="outLocation != null">
        out_location,
      </if>
      <if test="outTime != null">
        out_time,
      </if>
      <if test="outStatus != null">
        out_status,
      </if>
      <if test="outIsBack != null">
        out_is_back,
      </if>
      <if test="outReason != null">
        out_reason,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="partyName != null">
        #{partyName,jdbcType=VARCHAR},
      </if>
      <if test="branchName != null">
        #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="partyId != null">
        #{partyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="originalJob != null">
        #{originalJob,jdbcType=INTEGER},
      </if>
      <if test="province != null">
        #{province,jdbcType=INTEGER},
      </if>
      <if test="hasPapers != null">
        #{hasPapers,jdbcType=BIT},
      </if>
      <if test="flowTime != null">
        #{flowTime,jdbcType=DATE},
      </if>
      <if test="flowReason != null">
        #{flowReason,jdbcType=VARCHAR},
      </if>
      <if test="growTime != null">
        #{growTime,jdbcType=DATE},
      </if>
      <if test="orLocation != null">
        #{orLocation,jdbcType=VARCHAR},
      </if>
      <if test="inflowStatus != null">
        #{inflowStatus,jdbcType=TINYINT},
      </if>
      <if test="isBack != null">
        #{isBack,jdbcType=BIT},
      </if>
      <if test="outUnit != null">
        #{outUnit,jdbcType=VARCHAR},
      </if>
      <if test="outLocation != null">
        #{outLocation,jdbcType=INTEGER},
      </if>
      <if test="outTime != null">
        #{outTime,jdbcType=DATE},
      </if>
      <if test="outStatus != null">
        #{outStatus,jdbcType=TINYINT},
      </if>
      <if test="outIsBack != null">
        #{outIsBack,jdbcType=BIT},
      </if>
      <if test="outReason != null">
        #{outReason,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.member.MemberInflowExample" resultType="java.lang.Long">
    select count(*) from ow_member_inflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ow_member_inflow
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.partyName != null">
        party_name = #{record.partyName,jdbcType=VARCHAR},
      </if>
      <if test="record.branchName != null">
        branch_name = #{record.branchName,jdbcType=VARCHAR},
      </if>
      <if test="record.partyId != null">
        party_id = #{record.partyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.originalJob != null">
        original_job = #{record.originalJob,jdbcType=INTEGER},
      </if>
      <if test="record.province != null">
        province = #{record.province,jdbcType=INTEGER},
      </if>
      <if test="record.hasPapers != null">
        has_papers = #{record.hasPapers,jdbcType=BIT},
      </if>
      <if test="record.flowTime != null">
        flow_time = #{record.flowTime,jdbcType=DATE},
      </if>
      <if test="record.flowReason != null">
        flow_reason = #{record.flowReason,jdbcType=VARCHAR},
      </if>
      <if test="record.growTime != null">
        grow_time = #{record.growTime,jdbcType=DATE},
      </if>
      <if test="record.orLocation != null">
        or_location = #{record.orLocation,jdbcType=VARCHAR},
      </if>
      <if test="record.inflowStatus != null">
        inflow_status = #{record.inflowStatus,jdbcType=TINYINT},
      </if>
      <if test="record.isBack != null">
        is_back = #{record.isBack,jdbcType=BIT},
      </if>
      <if test="record.outUnit != null">
        out_unit = #{record.outUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.outLocation != null">
        out_location = #{record.outLocation,jdbcType=INTEGER},
      </if>
      <if test="record.outTime != null">
        out_time = #{record.outTime,jdbcType=DATE},
      </if>
      <if test="record.outStatus != null">
        out_status = #{record.outStatus,jdbcType=TINYINT},
      </if>
      <if test="record.outIsBack != null">
        out_is_back = #{record.outIsBack,jdbcType=BIT},
      </if>
      <if test="record.outReason != null">
        out_reason = #{record.outReason,jdbcType=VARCHAR},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ow_member_inflow
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      party_name = #{record.partyName,jdbcType=VARCHAR},
      branch_name = #{record.branchName,jdbcType=VARCHAR},
      party_id = #{record.partyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      original_job = #{record.originalJob,jdbcType=INTEGER},
      province = #{record.province,jdbcType=INTEGER},
      has_papers = #{record.hasPapers,jdbcType=BIT},
      flow_time = #{record.flowTime,jdbcType=DATE},
      flow_reason = #{record.flowReason,jdbcType=VARCHAR},
      grow_time = #{record.growTime,jdbcType=DATE},
      or_location = #{record.orLocation,jdbcType=VARCHAR},
      inflow_status = #{record.inflowStatus,jdbcType=TINYINT},
      is_back = #{record.isBack,jdbcType=BIT},
      out_unit = #{record.outUnit,jdbcType=VARCHAR},
      out_location = #{record.outLocation,jdbcType=INTEGER},
      out_time = #{record.outTime,jdbcType=DATE},
      out_status = #{record.outStatus,jdbcType=TINYINT},
      out_is_back = #{record.outIsBack,jdbcType=BIT},
      out_reason = #{record.outReason,jdbcType=VARCHAR},
      reason = #{record.reason,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.member.MemberInflow">
    update ow_member_inflow
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="partyName != null">
        party_name = #{partyName,jdbcType=VARCHAR},
      </if>
      <if test="branchName != null">
        branch_name = #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="partyId != null">
        party_id = #{partyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        branch_id = #{branchId,jdbcType=INTEGER},
      </if>
      <if test="originalJob != null">
        original_job = #{originalJob,jdbcType=INTEGER},
      </if>
      <if test="province != null">
        province = #{province,jdbcType=INTEGER},
      </if>
      <if test="hasPapers != null">
        has_papers = #{hasPapers,jdbcType=BIT},
      </if>
      <if test="flowTime != null">
        flow_time = #{flowTime,jdbcType=DATE},
      </if>
      <if test="flowReason != null">
        flow_reason = #{flowReason,jdbcType=VARCHAR},
      </if>
      <if test="growTime != null">
        grow_time = #{growTime,jdbcType=DATE},
      </if>
      <if test="orLocation != null">
        or_location = #{orLocation,jdbcType=VARCHAR},
      </if>
      <if test="inflowStatus != null">
        inflow_status = #{inflowStatus,jdbcType=TINYINT},
      </if>
      <if test="isBack != null">
        is_back = #{isBack,jdbcType=BIT},
      </if>
      <if test="outUnit != null">
        out_unit = #{outUnit,jdbcType=VARCHAR},
      </if>
      <if test="outLocation != null">
        out_location = #{outLocation,jdbcType=INTEGER},
      </if>
      <if test="outTime != null">
        out_time = #{outTime,jdbcType=DATE},
      </if>
      <if test="outStatus != null">
        out_status = #{outStatus,jdbcType=TINYINT},
      </if>
      <if test="outIsBack != null">
        out_is_back = #{outIsBack,jdbcType=BIT},
      </if>
      <if test="outReason != null">
        out_reason = #{outReason,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.member.MemberInflow">
    update ow_member_inflow
    set user_id = #{userId,jdbcType=INTEGER},
      party_name = #{partyName,jdbcType=VARCHAR},
      branch_name = #{branchName,jdbcType=VARCHAR},
      party_id = #{partyId,jdbcType=INTEGER},
      branch_id = #{branchId,jdbcType=INTEGER},
      original_job = #{originalJob,jdbcType=INTEGER},
      province = #{province,jdbcType=INTEGER},
      has_papers = #{hasPapers,jdbcType=BIT},
      flow_time = #{flowTime,jdbcType=DATE},
      flow_reason = #{flowReason,jdbcType=VARCHAR},
      grow_time = #{growTime,jdbcType=DATE},
      or_location = #{orLocation,jdbcType=VARCHAR},
      inflow_status = #{inflowStatus,jdbcType=TINYINT},
      is_back = #{isBack,jdbcType=BIT},
      out_unit = #{outUnit,jdbcType=VARCHAR},
      out_location = #{outLocation,jdbcType=INTEGER},
      out_time = #{outTime,jdbcType=DATE},
      out_status = #{outStatus,jdbcType=TINYINT},
      out_is_back = #{outIsBack,jdbcType=BIT},
      out_reason = #{outReason,jdbcType=VARCHAR},
      reason = #{reason,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.member.MemberInflowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_inflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>