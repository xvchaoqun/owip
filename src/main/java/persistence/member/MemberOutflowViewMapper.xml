<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.member.MemberOutflowViewMapper">
  <resultMap id="BaseResultMap" type="domain.member.MemberOutflowView">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="party_name" jdbcType="VARCHAR" property="partyName" />
    <result column="branch_name" jdbcType="VARCHAR" property="branchName" />
    <result column="party_id" jdbcType="INTEGER" property="partyId" />
    <result column="branch_id" jdbcType="INTEGER" property="branchId" />
    <result column="original_job" jdbcType="INTEGER" property="originalJob" />
    <result column="direction" jdbcType="INTEGER" property="direction" />
    <result column="flow_time" jdbcType="DATE" property="flowTime" />
    <result column="province" jdbcType="INTEGER" property="province" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="has_papers" jdbcType="BIT" property="hasPapers" />
    <result column="or_status" jdbcType="TINYINT" property="orStatus" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="is_back" jdbcType="BIT" property="isBack" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="member_status" jdbcType="TINYINT" property="memberStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, party_name, branch_name, party_id, branch_id, original_job, direction, 
    flow_time, province, reason, has_papers, or_status, status, is_back, remark, create_time, 
    member_status
  </sql>
  <select id="selectByExample" parameterType="domain.member.MemberOutflowViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_outflow_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="domain.member.MemberOutflowViewExample">
    delete from ow_member_outflow_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.member.MemberOutflowView">
    insert into ow_member_outflow_view (id, user_id, party_name, 
      branch_name, party_id, branch_id, 
      original_job, direction, flow_time, 
      province, reason, has_papers, 
      or_status, status, is_back, 
      remark, create_time, member_status
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{partyName,jdbcType=VARCHAR}, 
      #{branchName,jdbcType=VARCHAR}, #{partyId,jdbcType=INTEGER}, #{branchId,jdbcType=INTEGER}, 
      #{originalJob,jdbcType=INTEGER}, #{direction,jdbcType=INTEGER}, #{flowTime,jdbcType=DATE}, 
      #{province,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, #{hasPapers,jdbcType=BIT}, 
      #{orStatus,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{isBack,jdbcType=BIT}, 
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{memberStatus,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="domain.member.MemberOutflowView">
    insert into ow_member_outflow_view
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="partyName != null">
        party_name,
      </if>
      <if test="branchName != null">
        branch_name,
      </if>
      <if test="partyId != null">
        party_id,
      </if>
      <if test="branchId != null">
        branch_id,
      </if>
      <if test="originalJob != null">
        original_job,
      </if>
      <if test="direction != null">
        direction,
      </if>
      <if test="flowTime != null">
        flow_time,
      </if>
      <if test="province != null">
        province,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="hasPapers != null">
        has_papers,
      </if>
      <if test="orStatus != null">
        or_status,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="isBack != null">
        is_back,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="memberStatus != null">
        member_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="partyName != null">
        #{partyName,jdbcType=VARCHAR},
      </if>
      <if test="branchName != null">
        #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="partyId != null">
        #{partyId,jdbcType=INTEGER},
      </if>
      <if test="branchId != null">
        #{branchId,jdbcType=INTEGER},
      </if>
      <if test="originalJob != null">
        #{originalJob,jdbcType=INTEGER},
      </if>
      <if test="direction != null">
        #{direction,jdbcType=INTEGER},
      </if>
      <if test="flowTime != null">
        #{flowTime,jdbcType=DATE},
      </if>
      <if test="province != null">
        #{province,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="hasPapers != null">
        #{hasPapers,jdbcType=BIT},
      </if>
      <if test="orStatus != null">
        #{orStatus,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="isBack != null">
        #{isBack,jdbcType=BIT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memberStatus != null">
        #{memberStatus,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.member.MemberOutflowViewExample" resultType="java.lang.Long">
    select count(*) from ow_member_outflow_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ow_member_outflow_view
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.partyName != null">
        party_name = #{record.partyName,jdbcType=VARCHAR},
      </if>
      <if test="record.branchName != null">
        branch_name = #{record.branchName,jdbcType=VARCHAR},
      </if>
      <if test="record.partyId != null">
        party_id = #{record.partyId,jdbcType=INTEGER},
      </if>
      <if test="record.branchId != null">
        branch_id = #{record.branchId,jdbcType=INTEGER},
      </if>
      <if test="record.originalJob != null">
        original_job = #{record.originalJob,jdbcType=INTEGER},
      </if>
      <if test="record.direction != null">
        direction = #{record.direction,jdbcType=INTEGER},
      </if>
      <if test="record.flowTime != null">
        flow_time = #{record.flowTime,jdbcType=DATE},
      </if>
      <if test="record.province != null">
        province = #{record.province,jdbcType=INTEGER},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.hasPapers != null">
        has_papers = #{record.hasPapers,jdbcType=BIT},
      </if>
      <if test="record.orStatus != null">
        or_status = #{record.orStatus,jdbcType=TINYINT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.isBack != null">
        is_back = #{record.isBack,jdbcType=BIT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.memberStatus != null">
        member_status = #{record.memberStatus,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ow_member_outflow_view
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      party_name = #{record.partyName,jdbcType=VARCHAR},
      branch_name = #{record.branchName,jdbcType=VARCHAR},
      party_id = #{record.partyId,jdbcType=INTEGER},
      branch_id = #{record.branchId,jdbcType=INTEGER},
      original_job = #{record.originalJob,jdbcType=INTEGER},
      direction = #{record.direction,jdbcType=INTEGER},
      flow_time = #{record.flowTime,jdbcType=DATE},
      province = #{record.province,jdbcType=INTEGER},
      reason = #{record.reason,jdbcType=VARCHAR},
      has_papers = #{record.hasPapers,jdbcType=BIT},
      or_status = #{record.orStatus,jdbcType=TINYINT},
      status = #{record.status,jdbcType=TINYINT},
      is_back = #{record.isBack,jdbcType=BIT},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      member_status = #{record.memberStatus,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.member.MemberOutflowViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ow_member_outflow_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>