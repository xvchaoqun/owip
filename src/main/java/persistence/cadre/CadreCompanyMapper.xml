<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.cadre.CadreCompanyMapper" >
  <resultMap id="BaseResultMap" type="domain.cadre.CadreCompany" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="cadre_id" property="cadreId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="type_other" property="typeOther" jdbcType="VARCHAR" />
    <result column="has_pay" property="hasPay" jdbcType="BIT" />
    <result column="start_time" property="startTime" jdbcType="DATE" />
    <result column="unit" property="unit" jdbcType="VARCHAR" />
    <result column="report_unit" property="reportUnit" jdbcType="VARCHAR" />
    <result column="paper" property="paper" jdbcType="VARCHAR" />
    <result column="paper_filename" property="paperFilename" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, cadre_id, type, type_other, has_pay, start_time, unit, report_unit, paper, paper_filename, 
    remark, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="domain.cadre.CadreCompanyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cadre_company
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from cadre_company
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from cadre_company
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.cadre.CadreCompanyExample" >
    delete from cadre_company
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert keyProperty="id" id="insert" parameterType="domain.cadre.CadreCompany" >
    insert into cadre_company (id, cadre_id, type, 
      type_other, has_pay, start_time, 
      unit, report_unit, paper, 
      paper_filename, remark, status
      )
    values (#{id,jdbcType=INTEGER}, #{cadreId,jdbcType=INTEGER}, #{type,jdbcType=TINYINT}, 
      #{typeOther,jdbcType=VARCHAR}, #{hasPay,jdbcType=BIT}, #{startTime,jdbcType=DATE}, 
      #{unit,jdbcType=VARCHAR}, #{reportUnit,jdbcType=VARCHAR}, #{paper,jdbcType=VARCHAR}, 
      #{paperFilename,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert keyProperty="id" id="insertSelective" parameterType="domain.cadre.CadreCompany" >
    insert into cadre_company
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="cadreId != null" >
        cadre_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="typeOther != null" >
        type_other,
      </if>
      <if test="hasPay != null" >
        has_pay,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="reportUnit != null" >
        report_unit,
      </if>
      <if test="paper != null" >
        paper,
      </if>
      <if test="paperFilename != null" >
        paper_filename,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="typeOther != null" >
        #{typeOther,jdbcType=VARCHAR},
      </if>
      <if test="hasPay != null" >
        #{hasPay,jdbcType=BIT},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=DATE},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="reportUnit != null" >
        #{reportUnit,jdbcType=VARCHAR},
      </if>
      <if test="paper != null" >
        #{paper,jdbcType=VARCHAR},
      </if>
      <if test="paperFilename != null" >
        #{paperFilename,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.cadre.CadreCompanyExample" resultType="java.lang.Integer" >
    select count(*) from cadre_company
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update cadre_company
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null" >
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.typeOther != null" >
        type_other = #{record.typeOther,jdbcType=VARCHAR},
      </if>
      <if test="record.hasPay != null" >
        has_pay = #{record.hasPay,jdbcType=BIT},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=DATE},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.reportUnit != null" >
        report_unit = #{record.reportUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.paper != null" >
        paper = #{record.paper,jdbcType=VARCHAR},
      </if>
      <if test="record.paperFilename != null" >
        paper_filename = #{record.paperFilename,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update cadre_company
    set id = #{record.id,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT},
      type_other = #{record.typeOther,jdbcType=VARCHAR},
      has_pay = #{record.hasPay,jdbcType=BIT},
      start_time = #{record.startTime,jdbcType=DATE},
      unit = #{record.unit,jdbcType=VARCHAR},
      report_unit = #{record.reportUnit,jdbcType=VARCHAR},
      paper = #{record.paper,jdbcType=VARCHAR},
      paper_filename = #{record.paperFilename,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.cadre.CadreCompany" >
    update cadre_company
    <set >
      <if test="cadreId != null" >
        cadre_id = #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="typeOther != null" >
        type_other = #{typeOther,jdbcType=VARCHAR},
      </if>
      <if test="hasPay != null" >
        has_pay = #{hasPay,jdbcType=BIT},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=DATE},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="reportUnit != null" >
        report_unit = #{reportUnit,jdbcType=VARCHAR},
      </if>
      <if test="paper != null" >
        paper = #{paper,jdbcType=VARCHAR},
      </if>
      <if test="paperFilename != null" >
        paper_filename = #{paperFilename,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.cadre.CadreCompany" >
    update cadre_company
    set cadre_id = #{cadreId,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      type_other = #{typeOther,jdbcType=VARCHAR},
      has_pay = #{hasPay,jdbcType=BIT},
      start_time = #{startTime,jdbcType=DATE},
      unit = #{unit,jdbcType=VARCHAR},
      report_unit = #{reportUnit,jdbcType=VARCHAR},
      paper = #{paper,jdbcType=VARCHAR},
      paper_filename = #{paperFilename,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="domain.cadre.CadreCompanyExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cadre_company
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>