<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.cadre.common.ICadreMapper">

    <sql id="statCadreSearchSql">
        <if test="searchBean.type!=null">
            c.type=#{searchBean.type}
        </if>
        <if test="searchBean.cadreId!=null">
            and c.id=#{searchBean.cadreId}
        </if>
        <if test="searchBean.cadreStatus!=null">
            and c.status=#{searchBean.cadreStatus}
        </if>
        <if test="searchBean.hasTalentTitle!=null">
            and c.talent_title is not null
        </if>
    </sql>

    <resultMap id="ICadreEduBaseResultMap" extends="persistence.cadre.CadreEduMapper.BaseResultMap"
               type="persistence.cadre.common.ICadreEdu">
    </resultMap>
    <!--1、查找干部的（境外）学习经历 -->
    <select id="selectCadreEduList" resultMap="ICadreEduBaseResultMap" parameterType="map">
        select ce.* from cadre_edu ce , cadre c
        <where>
            <include refid="statCadreSearchSql"/>
            and ce.cadre_id=c.id and ce.school_type =#{schoolType}
        </where>
    </select>
    <select id="countCadreEduList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct ce.id) from cadre_edu ce , cadre c
        <where>
            <include refid="statCadreSearchSql"/>
            and ce.cadre_id=c.id and ce.school_type =#{schoolType}
        </where>
    </select>
    <select id="selectCadreIdListByEdu" resultType="java.lang.Integer" parameterType="map">
        select distinct c.id from cadre_edu ce , cadre c
        <where>
            <include refid="statCadreSearchSql"/>
            and ce.cadre_id=c.id and ce.school_type =#{schoolType}
        </where>
    </select>

    <resultMap id="ICadreWorkBaseResultMap" extends="persistence.cadre.CadreWorkMapper.BaseResultMap"
               type="persistence.cadre.common.ICadreWork"></resultMap>
    <!--2、查找干部的工作经历 3、查找（机关）干部的（院系）工作经历 4、查找（院系）干部的（机关）工作经历-->
    <select id="selectCadreWorkList" resultMap="ICadreWorkBaseResultMap" parameterType="map">
        select cw.* from cadre_work cw , cadre_view c
        <where>
            <include refid="statCadreSearchSql"/>
            and cw.cadre_id=c.id and find_in_set(#{workType}, cw.work_types)
        </where>
    </select>
    <select id="countCadreWorkList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct cw.id) from cadre_work cw , cadre_view c
        <where>
            <include refid="statCadreSearchSql"/>
            and cw.cadre_id=c.id and find_in_set(#{workType}, cw.work_types)
        </where>
    </select>
    <!--5、有校外挂职经历的干部-->
    <select id="selectCrpRecordList" resultMap="persistence.crp.CrpRecordMapper.BaseResultMap" parameterType="map">
        select cr.* from crp_record cr , cadre c
        <where>
            <include refid="statCadreSearchSql"/>
            and cr.user_id=c.user_id and cr.type =#{type}
        </where>
    </select>
    <select id="countCrpRecordList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct cr.id) from crp_record cr , cadre c
        <where>
            <include refid="statCadreSearchSql"/>
            and cr.user_id=c.user_id and cr.type =#{type}
        </where>
    </select>

    <!--6、具有人才/荣誉称号的干部-->
    <select id="selectTalentCadreList" resultType="persistence.cadre.common.ICarde" parameterType="map">
        select c.id from cadre_view c
        <where>
            <include refid="statCadreSearchSql"/>
        </where>
    </select>
    <select id="countTalentCadreList" parameterType="map" resultType="java.lang.Integer">
        select count(distinct c.id) from cadre_view c
        <where>
            <include refid="statCadreSearchSql"/>
        </where>
    </select>

    <sql id="cadreSearchSql">
        <if test="search!=null and search.length>0">
            and (u.username like #{search} or u.realname like #{search} or u.code like #{search})
        </if>
        <if test="unitIds != null and unitIds.length>0">
            and c.unit_id IN
            <foreach collection="unitIds" item="unitId" separator="," open="(" close=")">
                #{unitId}
            </foreach>
        </if>
        <if test="isCommitteeMember != null">
            and if(!isnull(cm.id), 1, 0) = #{isCommitteeMember}
        </if>
        <if test="cadreStatusList!=null and cadreStatusList.size>0">
            and c.status in
            <foreach collection="cadreStatusList" item="st"
                     index="index" open="(" close=")" separator=",">
                #{st}
            </foreach>
        </if>
    </sql>
    <select id="selectCadreList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">
        select c.* from cadre_view c
        <if test="isCommitteeMember != null">
            left join cm_member cm on cm.user_id=c.user_id and cm.is_quit=0
            left join base_meta_type pc_post on cm.post=pc_post.id and pc_post.bool_attr=1
        </if>
        , sys_user_view u where u.type=1 and c.user_id= u.id
        <include refid="cadreSearchSql"/>
        order by c.sort_order desc
    </select>
    <select id="countCadreList" parameterType="map" resultType="java.lang.Integer">
        select count(c.id) from cadre_view c
        <if test="isCommitteeMember != null">
            left join cm_member cm on cm.user_id=c.user_id and cm.is_quit=0
            left join base_meta_type pc_post on cm.post=pc_post.id and pc_post.bool_attr=1
        </if>
        , sys_user_view u where u.type=1 and c.user_id= u.id
        <include refid="cadreSearchSql"/>
    </select>


    <sql id="userSearchSql">
        select id, realname, username, code, type,create_time, role_ids from sys_user_view
        <if test="query!=null and query.length>0">
            <where>
                and username like '${query}%'
            </where>
            union
            select id, realname, username, code, type,create_time, role_ids from sys_user_view
            <where>
                and realname like '${query}%'
            </where>
            union
            select id, realname, username, code, type,create_time, role_ids from sys_user_view
            <where>
                and code like '${query}%'
            </where>
        </if>
    </sql>
    <select id="selectNotCadreList" resultMap="persistence.sys.SysUserViewMapper.BaseResultMap" parameterType="map">
        select id, realname, username, code, type,create_time, role_ids from (<include refid="userSearchSql"/>) u where u.type=1 and not exists(select 1 from cadre
        where user_id = u.id
        <if test="cadreStatusList.size>0">
            and status in
            <foreach collection="cadreStatusList" item="status"
                     index="index" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        )
        and role_ids not like "%${regRoleStr}%"
        order by create_time desc
    </select>

    <select id="countNotCadreList" parameterType="map" resultType="java.lang.Integer">
        select count(id) from (<include refid="userSearchSql"/>) u where u.type=1 and not exists(select 1 from cadre
        where user_id = u.id
        <if test="cadreStatusList.size>0">
            and status in
            <foreach collection="cadreStatusList" item="status"
                     index="index" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        )
        and role_ids not like "%${regRoleStr}%"
    </select>

    <select id="getCadreEvas" resultMap="persistence.cadre.CadreEvaMapper.BaseResultMap" parameterType="map">
        select ce.* from cadre_eva ce, cadre c where ce.cadre_id=c.id
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        and ce.year between #{startYear} and #{endYear} order by c.sort_order desc, ce.year asc
    </select>
    <select id="getCadreReserveEvas" resultMap="persistence.cadre.CadreEvaMapper.BaseResultMap" parameterType="map">
        select ce.* from cadre_eva ce, cadre_reserve c where ce.cadre_id=c.cadre_id
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveId}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        and ce.year between #{startYear} and #{endYear} order by c.sort_order asc, ce.year asc
    </select>

    <select id="getCadreFamilys" resultMap="persistence.cadre.CadreFamilyMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_family cf, cadre c where cf.cadre_id=c.id and cf.status=0
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order desc
    </select>
    <select id="getCadreReserveFamilys" resultMap="persistence.cadre.CadreFamilyMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_family cf, cadre_reserve c where cf.cadre_id=c.cadre_id and cf.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveId}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc
    </select>

    <select id="getCadreTrains" resultMap="persistence.cadre.CadreTrainMapper.BaseResultMap" parameterType="map">
        select ct.* from cadre_train ct, cadre c where ct.cadre_id=c.id and ct.status=0
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order desc
    </select>
    <select id="getCadreReserveTrains" resultMap="persistence.cadre.CadreTrainMapper.BaseResultMap" parameterType="map">
        select ct.* from cadre_train ct, cadre_reserve c where ct.cadre_id=c.cadre_id and ct.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveId}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc
    </select>

    <select id="getCadreParttimes" resultMap="persistence.cadre.CadreParttimeMapper.BaseResultMap" parameterType="map">
        select cp.* from cadre_parttime cp, cadre c where cp.cadre_id=c.id and cp.status=0
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order desc
    </select>
    <select id="getCadreReserveParttimes" resultMap="persistence.cadre.CadreParttimeMapper.BaseResultMap" parameterType="map">
        select cp.* from cadre_parttime cp, cadre_reserve c where cp.cadre_id=c.cadre_id and cp.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveIds}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc
    </select>

    <select id="getCadreReserveCompany" resultMap="persistence.cadre.CadreCompanyViewMapper.BaseResultMap" parameterType="map">
        select ccv.* from cadre_company_view ccv, cadre_reserve c where ccv.cadre_id=c.cadre_id and ccv.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveIds}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc
    </select>

    <select id="getCadreEdus" resultMap="persistence.cadre.CadreEduMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_edu cf, cadre c where cf.cadre_id=c.id and cf.status=0
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order desc, cf.enrol_time asc
    </select>

    <select id="getCadreReserveEdus" resultMap="persistence.cadre.CadreEduMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_edu cf, cadre_reserve c where cf.cadre_id=c.cadre_id and cf.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveId}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc, cf.enrol_time asc
    </select>

    <select id="getCadreWorks" resultMap="persistence.cadre.CadreWorkMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_work cf, cadre c where cf.cadre_id=c.id and cf.status=0
        <if test="cadreIds != null and cadreIds.length>0">
            and c.id IN
            <foreach collection="cadreIds" item="cadreId" separator="," open="(" close=")">
                #{cadreId}
            </foreach>
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order desc, cf.start_time asc
    </select>

    <select id="getCadreReserveWorks" resultMap="persistence.cadre.CadreWorkMapper.BaseResultMap" parameterType="map">
        select cf.* from cadre_work cf, cadre_reserve c where cf.cadre_id=c.cadre_id and cf.status=0
        <if test="reserveIds != null and reserveIds.length>0">
            and c.id IN
            <foreach collection="reserveIds" item="reserveId" separator="," open="(" close=")">
                #{reserveId}
            </foreach>
        </if>
        <if test="reserveType != null">
            and c.type = #{reserveType}
        </if>
        <if test="status != null">
            and c.status = #{status}
        </if>
        order by c.sort_order asc, cf.start_time asc
    </select>
    <!-- 统计是否有挂职经历-->
    <update id="refreshHasCrp">
        update cadre
        set has_crp=0;
        UPDATE cadre c,
            (
                SELECT c.id, ct.num AS work_num, crp.num AS crp_num
                FROM cadre c
                         LEFT JOIN (
                    SELECT cadre_id, COUNT(*) AS num
                    FROM cadre_work cw,
                         base_meta_type wt
                    WHERE find_in_set(wt.id, cw.work_types)
                      AND wt.bool_attr = 1
                      and cw.`status` = 0
                    GROUP BY cadre_id
                ) ct ON ct.cadre_id = c.id
                         LEFT JOIN (
                    SELECT user_id, COUNT(*) num FROM crp_record WHERE user_id IS NOT null GROUP BY user_id
                ) crp ON crp.user_id = c.user_id
                WHERE ct.num > 0
                   OR crp.num > 0) ct
        SET c.has_crp=1
        WHERE c.id = ct.id;
    </update>

    <insert id="batchSortByAdminLevel" parameterType="map">
        insert into tmp_sort_cadre(user_id, code, realname) select c.user_id, c.code, c.realname
        from cadre_view c left join unit u on c.unit_id=u.id where c.status=#{status} order by u.sort_order asc,c.admin_level asc;
    </insert>

    <insert id="batchSortByUnit" parameterType="map">
        insert into tmp_sort_cadre(user_id, code, realname) select c.user_id, c.code, c.realname from cadre_view c
        left join unit u on c.unit_id=u.id
        left join unit_post up on c.unit_post_id=up.id
        where c.status=#{status} order by u.sort_order asc, up.sort_order asc;
    </insert>

    <update id="updateCadreByTmpSort" parameterType="map">
        update tmp_sort_cadre set sort_order = (#{count}+1)-id;
        update cadre c, tmp_sort_cadre t set c.sort_order=t.sort_order where c.user_id=t.user_id;
    </update>
</mapper>