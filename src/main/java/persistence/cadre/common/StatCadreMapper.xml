<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.cadre.common.StatCadreMapper">
    <resultMap id="BaseResultMap" type="persistence.cadre.common.StatCadreBean" >
        <result column="admin_level_code" property="adminLevelCode" jdbcType="VARCHAR" />
        <result column="gender" property="gender" jdbcType="TINYINT" />
        <result column="nation" property="nation" jdbcType="VARCHAR" />
        <result column="degree_type" property="degreeType" jdbcType="TINYINT" />
        <result column="edu_id" property="eduId" jdbcType="INTEGER" />
        <result column="num" property="num" jdbcType="INTEGER" />
        <result column="num_1" property="num1" jdbcType="INTEGER" />
        <result column="num_2" property="num2" jdbcType="INTEGER" />
        <result column="num_3" property="num3" jdbcType="INTEGER" />
        <result column="num_4" property="num4" jdbcType="INTEGER" />
        <result column="num_5" property="num5" jdbcType="INTEGER" />
        <result column="num_6" property="num6" jdbcType="INTEGER" />
        <result column="num_7" property="num7" jdbcType="INTEGER" />
        <result column="val" property="val" jdbcType="DECIMAL" />
    </resultMap>
    <sql id="andSql">
        <if test="s.unitTypeGroup!=null">
            and unit_type_group =#{s.unitTypeGroup}
        </if>
        <!--处级干部-->
        <if test="s.cadreCategory==1">
            and status=1
        </if>
        <!--科级干部-->
        <if test="s.cadreCategory==2">
            and status=8
        </if>
        <if test="s.isPrincipal!=null">
            and is_principal=#{s.isPrincipal}
        </if>
        <if test="s.isKeepSalary!=null">
            <if test="s.isKeepSalary">
                and main_cadre_post_id>0 and unit_post_id is null
            </if>
            <if test="!s.isKeepSalary">
                and (main_cadre_post_id is null or unit_post_id > 0)
            </if>
        </if>
        <if test="s.minNowPostAge!=null">
            and cadre_post_year >= #{s.minNowPostAge}
        </if>
        <if test="s.maxNowPostAge!=null">
            <![CDATA[and cadre_post_year <= #{s.maxNowPostAge}]]>
        </if>
        <if test="s.labels != null and s.labels.size>0">
        and
        <foreach collection="s.labels" item="label" index="index"
                 open="(" close=")" separator=" or ">
            find_in_set(#{label}, label)
        </foreach>
        </if>
        <if test="s.adminLevels != null and s.adminLevels.size>0">
            and admin_level IN
            <foreach collection="s.adminLevels" item="adminLevel" separator="," open="(" close=")">
                #{adminLevel}
            </foreach>
        </if>
    </sql>
    <!-- 按日/月计算年龄 -->
    <sql id="ageEl">
        <if test="s.birthToDay">TIMESTAMPDIFF(YEAR, birth, CURDATE())</if>
        <if test="!s.birthToDay">(year(CURDATE())-year(birth) + if(month(birth)>month(CURDATE()), -1, 0))</if>
    </sql>

    <!-- 总人数 -->
    <select id="countCadre" resultType="java.lang.Integer" parameterType="map">
        select count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
    </select>

    <!-- 行政级别 -->
    <select id="cadre_stat_adminLevel" resultMap="BaseResultMap" parameterType="map">
       select admin_level_code, count(*) as num from cadre_view where 1=1
        <include refid="andSql" /> and admin_level_code is not null
       group by admin_level_code
    </select>
    <!-- 性别 -->
    <select id="cadre_stat_gender" resultMap="BaseResultMap" parameterType="map">
        select gender, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
        and gender is not null group by gender
    </select>
    <!-- 行政级别-性别 -->
    <select id="cadre_stat_adminLevel_gender" resultMap="BaseResultMap" parameterType="map">
        select admin_level_code, gender, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
        and gender is not null and admin_level_code is not null group by admin_level_code, gender
    </select>
    <!-- 民族 -->
    <select id="cadre_stat_nation" resultMap="BaseResultMap" parameterType="map">
        select nation, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
        and nation is not null and nation!='' group by nation
    </select>
    <!-- 民族-行政级别 -->
    <select id="cadre_stat_nation_adminLevel" resultMap="BaseResultMap" parameterType="map">
        select nation, admin_level_code,  count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
        and nation is not null and nation!='' and admin_level_code is not null group by nation, admin_level_code
    </select>
    <!-- 民族-性别 -->
    <select id="cadre_stat_nation_gender" resultMap="BaseResultMap" parameterType="map">
        select nation, gender, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
        and gender is not null and gender!='' and nation is not null and nation!='' group by nation, gender
    </select>
    <!-- 党派 (num_1:民主党派 num_2:中共党员)-->
    <select id="cadre_stat_dp" resultMap="BaseResultMap" parameterType="map">
        select sum(if(dp_type_id>0 and dp_type_id!=#{crowdId}, 1,0)) as num_1,
               sum(if(is_ow=1, 1,0)) as num_2,
               sum(if(is_ow=0 and (dp_type_id is null or dp_type_id=#{crowdId}), 1, 0)) as num_3 from cadre_view  where 1=1
        <include refid="andSql" />
    </select>
    <!-- 党派-行政级别 -->
    <select id="cadre_stat_dp_adminLevel" resultMap="BaseResultMap" parameterType="map">
       select admin_level_code, sum(if(dp_type_id>0 and dp_type_id!=#{crowdId}, 1,0)) as num_1,
              sum(if(is_ow=1, 1,0)) as num_2,
              sum(if(is_ow=0 and (dp_type_id is null or dp_type_id=#{crowdId}), 1, 0)) as num_3 from cadre_view  where 1=1
        <include refid="andSql" /> and admin_level_code is not null
        group by admin_level_code
    </select>
    <!-- 党派-性别 -->
    <select id="cadre_stat_dp_gender" resultMap="BaseResultMap" parameterType="map">
        select gender, sum(if(dp_type_id>0 and dp_type_id!=#{crowdId}, 1,0)) as num_1,
               sum(if(is_ow=1, 1,0)) as num_2,
               sum(if(is_ow=0 and (dp_type_id is null or dp_type_id=#{crowdId}), 1, 0)) as num_3 from cadre_view  where 1=1
        <include refid="andSql" />
         and gender is not null group by gender
    </select>
    <!-- 年龄 -->
    <select id="cadre_stat_age" resultMap="BaseResultMap" parameterType="map">
        select
         <![CDATA[
         sum(if(age<=30, num,0)) as num_1
        ,sum(if(age>=31 and age<=35, num,0)) as num_2
        ,sum(if(age>=36 and age<=40, num,0)) as num_3
        ,sum(if(age>=41 and age<=45, num,0)) as num_4
        ,sum(if(age>=46 and age<=50, num,0)) as num_5
        ,sum(if(age>=51 and age<=55, num,0)) as num_6
        ,sum(if(age>55, num,0)) as num_7
        ]]>
        from (
        select <include refid="ageEl"/> as age, count(*) as num from cadre_view  where 1=1
         <include refid="andSql" />
         and birth is not null group by age
        ) tmp

    </select>
    <!-- 年龄-行政级别 -->
    <select id="cadre_stat_age_adminLevel" resultMap="BaseResultMap" parameterType="map">
        <![CDATA[
        select admin_level_code,
         sum(if(age<=30, num,0)) as num_1
        ,sum(if(age>=31 and age<=35, num,0)) as num_2
        ,sum(if(age>=36 and age<=40, num,0)) as num_3
        ,sum(if(age>=41 and age<=45, num,0)) as num_4
        ,sum(if(age>=46 and age<=50, num,0)) as num_5
        ,sum(if(age>=51 and age<=55, num,0)) as num_6
        ,sum(if(age>55, num,0)) as num_7
        ]]>
         from (
        select <include refid="ageEl"/> as age, admin_level_code, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
         and birth is not null and admin_level_code is not null group by age,admin_level_code
        ) tmp group by admin_level_code

    </select>
    <!-- 年龄-性别 -->
    <select id="cadre_stat_age_gender" resultMap="BaseResultMap" parameterType="map">

        select gender,
        <![CDATA[
         sum(if(age<=30, num,0)) as num_1
        ,sum(if(age>=31 and age<=35, num,0)) as num_2
        ,sum(if(age>=36 and age<=40, num,0)) as num_3
        ,sum(if(age>=41 and age<=45, num,0)) as num_4
        ,sum(if(age>=46 and age<=50, num,0)) as num_5
        ,sum(if(age>=51 and age<=55, num,0)) as num_6
        ,sum(if(age>55, num,0)) as num_7
        ]]>
         from (
        select <include refid="ageEl"/> as age, gender, count(*) as num from cadre_view  where 1=1
        <include refid="andSql" />
         and birth is not null and gender is not null group by age,gender
        ) tmp group by gender

    </select>

    <!-- 平均年龄 -->
    <select id="cadre_avg_age" resultMap="BaseResultMap" parameterType="map">
        select AVG(<include refid="ageEl"/>) as val from cadre_view  where 1=1
         <include refid="andSql" />
         and birth is not null
    </select>
    <!-- 平均年龄-行政级别 -->
    <select id="cadre_avg_age_adminLevel" resultMap="BaseResultMap" parameterType="map">
         select admin_level_code, AVG(<include refid="ageEl"/>) as val from cadre_view  where 1=1
        <include refid="andSql" />
         and birth is not null and admin_level_code is not null group by admin_level_code
    </select>
    <!-- 平均年龄-性别 -->
    <select id="cadre_avg_age_gender" resultMap="BaseResultMap" parameterType="map">
        select gender, AVG(<include refid="ageEl"/>) as val from cadre_view  where 1=1
        <include refid="andSql" />
        and birth is not null and gender is not null group by gender
    </select>

    <!-- 职称 -->
    <select id="cadre_stat_post" resultMap="BaseResultMap" parameterType="map">
        <![CDATA[
        select sum(if(pro_post_level like '%正高%', 1,0)) as num_1
        ,sum(if(pro_post_level like '%副高%', 1,0)) as num_2
        ,sum(if(pro_post_level REGEXP '(中|初)级', 1,0)) as num_3
        ,sum(if(pro_post_level is null or pro_post_level not REGEXP '副高|正高|(中|初)级', 1,0)) as num_4
         from cadre_view where 1=1
        ]]>
        <include refid="andSql" />
    </select>
    <!-- 职称-行政级别 -->
    <select id="cadre_stat_post_adminLevel" resultMap="BaseResultMap" parameterType="map">

        select admin_level_code, sum(if(pro_post_level like '%正高%', 1,0)) as num_1
        <![CDATA[
        ,sum(if(pro_post_level like '%副高%', 1,0)) as num_2
        ,sum(if(pro_post_level REGEXP '(中|初)级', 1,0)) as num_3
        ,sum(if(pro_post_level is null or pro_post_level not REGEXP '副高|正高|(中|初)级', 1,0)) as num_4
        ]]>
         from cadre_view where  1=1
        <include refid="andSql" />
         and admin_level_code is not null group by admin_level_code

    </select>
    <!-- 职称-性别 -->
    <select id="cadre_stat_post_gender" resultMap="BaseResultMap" parameterType="map">

        select gender, sum(if(pro_post_level like '%正高%', 1,0)) as num_1
        <![CDATA[
        ,sum(if(pro_post_level like '%副高%', 1,0)) as num_2
        ,sum(if(pro_post_level REGEXP '(中|初)级', 1,0)) as num_3
        ,sum(if(pro_post_level is null or pro_post_level not REGEXP '副高|正高|(中|初)级', 1,0)) as num_4
        ]]>
         from cadre_view where  1=1
         <include refid="andSql" />
         and gender is not null group by gender

    </select>
    <!-- 学位 -->
    <select id="cadre_stat_degree" resultMap="BaseResultMap" parameterType="map">
        select degree_type, count(*) as num from cadre_view where 1=1
        <include refid="andSql" /> group by degree_type
    </select>
    <!-- 学位-行政级别 -->
    <select id="cadre_stat_degree_adminLevel" resultMap="BaseResultMap" parameterType="map">
        select degree_type, admin_level_code, count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
         and admin_level_code is not null  group by degree_type, admin_level_code
    </select>
    <!-- 学位-性别 -->
    <select id="cadre_stat_degree_gender" resultMap="BaseResultMap" parameterType="map">
        select degree_type, gender, count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
         and gender is not null  group by degree_type, gender
    </select>

    <!-- 学历 -->
    <select id="cadre_stat_edu" resultMap="BaseResultMap" parameterType="map">
        select edu_id, count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
        and edu_id is not null group by edu_id
    </select>
    <!-- 学历-行政级别 -->
    <select id="cadre_stat_edu_adminLevel" resultMap="BaseResultMap" parameterType="map">
        select edu_id, admin_level_code, count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
         and edu_id is not null and admin_level_code is not null  group by edu_id, admin_level_code
    </select>
    <!-- 学历-性别 -->
    <select id="cadre_stat_edu_gender" resultMap="BaseResultMap" parameterType="map">
        select edu_id, gender, count(*) as num from cadre_view where 1=1
        <include refid="andSql" />
         and edu_id is not null and gender is not null  group by edu_id, gender
    </select>

    <!-- 专职 -->
    <select id="cadre_stat_double" resultMap="BaseResultMap" parameterType="map">
        select sum(if(is_double, 0,1)) as num_1, sum(if(is_double, 1,0)) as num_2 from cadre_view where 1=1 <include refid="andSql" />
    </select>
    <!-- 专职-行政级别 -->
    <select id="cadre_stat_double_adminLevel" resultMap="BaseResultMap" parameterType="map">
        select admin_level_code , sum(if(is_double, 0,1)) as num_1, sum(if(is_double, 1,0)) as num_2  from cadre_view where 1=1
        <include refid="andSql" />
         and admin_level_code is not null group by admin_level_code
    </select>
    <!-- 专职-性别 -->
    <select id="cadre_stat_double_gender" resultMap="BaseResultMap" parameterType="map">
        select gender , sum(if(is_double, 0,1)) as num_1, sum(if(is_double, 1,0)) as num_2  from cadre_view where 1=1
        <include refid="andSql" />
         and gender is not null group by gender
    </select>

    <!-- 全部类型 -->
    <select id="allCadreList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        order by sort_order desc
    </select>

    <!-- 行政级别 -->
    <select id="adminLevelList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        and admin_level_code is not null
        and admin_level_code =#{adminLevelCode}
        order by sort_order desc
    </select>

    <!-- 民族 -->
    <select id="nationList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="isHan">
            and nation like '汉%' and nation is not null and nation!=''
        </if>
        <if test="!isHan">
            and nation not like '汉%' and nation is not null and nation!=''
        </if>
        order by sort_order desc
    </select>

    <!-- 政治面貌 -->
    <select id="psList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="firstTypeNum==1">
            and is_ow=1
        </if>
        <if test="firstTypeNum==2">
            and dp_type_id>0 and dp_type_id!=#{crowdId}
        </if>
        <if test="firstTypeNum==3">
            and is_ow=0 and (dp_type_id is null or dp_type_id=#{crowdId})
        </if>
        order by sort_order desc
    </select>

    <!-- 年龄 -->
    <select id="ageList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="startAge!=null">
        and <include refid="ageEl"/> >= #{startAge}
        </if>
        <if test="endAge!=null">
          and #{endAge} >= <include refid="ageEl"/>
        </if>
        and birth is not null
        order by sort_order desc
    </select>

    <!-- 职称分布 -->
    <select id="postLevelList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">
        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="firstTypeNum==1">
            and pro_post_level like '%正高%'
        </if>
        <if test="firstTypeNum==2">
           and pro_post_level like '%副高%'
        </if>
        <if test="firstTypeNum==3">
            and pro_post_level REGEXP '(中|初)级'
        </if>
        <if test="firstTypeNum==4">
            and (pro_post_level is null or pro_post_level not REGEXP '副高|正高|(中|初)级')
        </if>
        order by sort_order desc
    </select>

    <!-- 学位 -->
    <select id="degreeList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="degreeType==4">
            and (degree_type is null or degree_type not in(1,2,3))
        </if>
        <if test="degreeType!=4">
            and degree_type =#{degreeType}
        </if>
        order by sort_order desc
    </select>

    <!-- 专职干部 -->
    <select id="isDoubleList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        <if test="isDouble"> and is_double = 1 </if>
        <if test="!isDouble"> and (is_double = 0 or is_double is null) </if>
        order by sort_order desc
    </select>

    <!-- 学历分布 -->
    <select id="educationList" resultMap="persistence.cadre.CadreViewMapper.BaseResultMap" parameterType="map">

        select * from cadre_view where 1=1
        <include refid="andSql" />
        and edu_id =#{eduId}
        and edu_id is not null
        order by sort_order desc
    </select>
</mapper>