<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.cadre.CadreRewardMapper" >
  <resultMap id="BaseResultMap" type="domain.cadre.CadreReward" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="cadre_id" property="cadreId" jdbcType="INTEGER" />
    <result column="reward_time" property="rewardTime" jdbcType="DATE" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="unit" property="unit" jdbcType="VARCHAR" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
    <result column="sort_order" property="sortOrder" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, cadre_id, reward_time, name, unit, rank, sort_order, type
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="domain.cadre.CadreRewardExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_cadre_reward
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from base_cadre_reward
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from base_cadre_reward
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.cadre.CadreRewardExample" >
    delete from base_cadre_reward
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert keyProperty="id" id="insert" parameterType="domain.cadre.CadreReward" >
    insert into base_cadre_reward (id, cadre_id, reward_time, 
      name, unit, rank, sort_order, 
      type)
    values (#{id,jdbcType=INTEGER}, #{cadreId,jdbcType=INTEGER}, #{rewardTime,jdbcType=DATE}, 
      #{name,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, #{rank,jdbcType=INTEGER}, #{sortOrder,jdbcType=INTEGER}, 
      #{type,jdbcType=TINYINT})
  </insert>
  <insert keyProperty="id" id="insertSelective" parameterType="domain.cadre.CadreReward" >
    insert into base_cadre_reward
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="cadreId != null" >
        cadre_id,
      </if>
      <if test="rewardTime != null" >
        reward_time,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="rank != null" >
        rank,
      </if>
      <if test="sortOrder != null" >
        sort_order,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="rewardTime != null" >
        #{rewardTime,jdbcType=DATE},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="rank != null" >
        #{rank,jdbcType=INTEGER},
      </if>
      <if test="sortOrder != null" >
        #{sortOrder,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.cadre.CadreRewardExample" resultType="java.lang.Integer" >
    select count(*) from base_cadre_reward
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update base_cadre_reward
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null" >
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.rewardTime != null" >
        reward_time = #{record.rewardTime,jdbcType=DATE},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.rank != null" >
        rank = #{record.rank,jdbcType=INTEGER},
      </if>
      <if test="record.sortOrder != null" >
        sort_order = #{record.sortOrder,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update base_cadre_reward
    set id = #{record.id,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      reward_time = #{record.rewardTime,jdbcType=DATE},
      name = #{record.name,jdbcType=VARCHAR},
      unit = #{record.unit,jdbcType=VARCHAR},
      rank = #{record.rank,jdbcType=INTEGER},
      sort_order = #{record.sortOrder,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.cadre.CadreReward" >
    update base_cadre_reward
    <set >
      <if test="cadreId != null" >
        cadre_id = #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="rewardTime != null" >
        reward_time = #{rewardTime,jdbcType=DATE},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="rank != null" >
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="sortOrder != null" >
        sort_order = #{sortOrder,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.cadre.CadreReward" >
    update base_cadre_reward
    set cadre_id = #{cadreId,jdbcType=INTEGER},
      reward_time = #{rewardTime,jdbcType=DATE},
      name = #{name,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      rank = #{rank,jdbcType=INTEGER},
      sort_order = #{sortOrder,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="domain.cadre.CadreRewardExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_cadre_reward
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>