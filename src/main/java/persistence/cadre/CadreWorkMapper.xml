<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.cadre.CadreWorkMapper" >
  <resultMap id="BaseResultMap" type="domain.cadre.CadreWork" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="fid" property="fid" jdbcType="INTEGER" />
    <result column="sub_work_count" property="subWorkCount" jdbcType="INTEGER" />
    <result column="cadre_id" property="cadreId" jdbcType="INTEGER" />
    <result column="start_time" property="startTime" jdbcType="DATE" />
    <result column="end_time" property="endTime" jdbcType="DATE" />
    <result column="unit" property="unit" jdbcType="VARCHAR" />
    <result column="unit_id" property="unitId" jdbcType="INTEGER" />
    <result column="post" property="post" jdbcType="VARCHAR" />
    <result column="type_id" property="typeId" jdbcType="INTEGER" />
    <result column="work_type" property="workType" jdbcType="INTEGER" />
    <result column="is_cadre" property="isCadre" jdbcType="BIT" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, fid, sub_work_count, cadre_id, start_time, end_time, unit, unit_id, post, type_id, 
    work_type, is_cadre, remark, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="domain.cadre.CadreWorkExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cadre_work
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from cadre_work
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from cadre_work
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.cadre.CadreWorkExample" >
    delete from cadre_work
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert keyProperty="id" id="insert" parameterType="domain.cadre.CadreWork" >
    insert into cadre_work (id, fid, sub_work_count, 
      cadre_id, start_time, end_time, 
      unit, unit_id, post, 
      type_id, work_type, is_cadre, 
      remark, status)
    values (#{id,jdbcType=INTEGER}, #{fid,jdbcType=INTEGER}, #{subWorkCount,jdbcType=INTEGER}, 
      #{cadreId,jdbcType=INTEGER}, #{startTime,jdbcType=DATE}, #{endTime,jdbcType=DATE}, 
      #{unit,jdbcType=VARCHAR}, #{unitId,jdbcType=INTEGER}, #{post,jdbcType=VARCHAR}, 
      #{typeId,jdbcType=INTEGER}, #{workType,jdbcType=INTEGER}, #{isCadre,jdbcType=BIT}, 
      #{remark,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert keyProperty="id" id="insertSelective" parameterType="domain.cadre.CadreWork" >
    insert into cadre_work
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fid != null" >
        fid,
      </if>
      <if test="subWorkCount != null" >
        sub_work_count,
      </if>
      <if test="cadreId != null" >
        cadre_id,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="unitId != null" >
        unit_id,
      </if>
      <if test="post != null" >
        post,
      </if>
      <if test="typeId != null" >
        type_id,
      </if>
      <if test="workType != null" >
        work_type,
      </if>
      <if test="isCadre != null" >
        is_cadre,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="fid != null" >
        #{fid,jdbcType=INTEGER},
      </if>
      <if test="subWorkCount != null" >
        #{subWorkCount,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=DATE},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=DATE},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="unitId != null" >
        #{unitId,jdbcType=INTEGER},
      </if>
      <if test="post != null" >
        #{post,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null" >
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="workType != null" >
        #{workType,jdbcType=INTEGER},
      </if>
      <if test="isCadre != null" >
        #{isCadre,jdbcType=BIT},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.cadre.CadreWorkExample" resultType="java.lang.Integer" >
    select count(*) from cadre_work
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update cadre_work
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.fid != null" >
        fid = #{record.fid,jdbcType=INTEGER},
      </if>
      <if test="record.subWorkCount != null" >
        sub_work_count = #{record.subWorkCount,jdbcType=INTEGER},
      </if>
      <if test="record.cadreId != null" >
        cadre_id = #{record.cadreId,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=DATE},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=DATE},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.unitId != null" >
        unit_id = #{record.unitId,jdbcType=INTEGER},
      </if>
      <if test="record.post != null" >
        post = #{record.post,jdbcType=VARCHAR},
      </if>
      <if test="record.typeId != null" >
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.workType != null" >
        work_type = #{record.workType,jdbcType=INTEGER},
      </if>
      <if test="record.isCadre != null" >
        is_cadre = #{record.isCadre,jdbcType=BIT},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update cadre_work
    set id = #{record.id,jdbcType=INTEGER},
      fid = #{record.fid,jdbcType=INTEGER},
      sub_work_count = #{record.subWorkCount,jdbcType=INTEGER},
      cadre_id = #{record.cadreId,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=DATE},
      end_time = #{record.endTime,jdbcType=DATE},
      unit = #{record.unit,jdbcType=VARCHAR},
      unit_id = #{record.unitId,jdbcType=INTEGER},
      post = #{record.post,jdbcType=VARCHAR},
      type_id = #{record.typeId,jdbcType=INTEGER},
      work_type = #{record.workType,jdbcType=INTEGER},
      is_cadre = #{record.isCadre,jdbcType=BIT},
      remark = #{record.remark,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.cadre.CadreWork" >
    update cadre_work
    <set >
      <if test="fid != null" >
        fid = #{fid,jdbcType=INTEGER},
      </if>
      <if test="subWorkCount != null" >
        sub_work_count = #{subWorkCount,jdbcType=INTEGER},
      </if>
      <if test="cadreId != null" >
        cadre_id = #{cadreId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=DATE},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=DATE},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="unitId != null" >
        unit_id = #{unitId,jdbcType=INTEGER},
      </if>
      <if test="post != null" >
        post = #{post,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="workType != null" >
        work_type = #{workType,jdbcType=INTEGER},
      </if>
      <if test="isCadre != null" >
        is_cadre = #{isCadre,jdbcType=BIT},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.cadre.CadreWork" >
    update cadre_work
    set fid = #{fid,jdbcType=INTEGER},
      sub_work_count = #{subWorkCount,jdbcType=INTEGER},
      cadre_id = #{cadreId,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=DATE},
      end_time = #{endTime,jdbcType=DATE},
      unit = #{unit,jdbcType=VARCHAR},
      unit_id = #{unitId,jdbcType=INTEGER},
      post = #{post,jdbcType=VARCHAR},
      type_id = #{typeId,jdbcType=INTEGER},
      work_type = #{workType,jdbcType=INTEGER},
      is_cadre = #{isCadre,jdbcType=BIT},
      remark = #{remark,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="domain.cadre.CadreWorkExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cadre_work
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>