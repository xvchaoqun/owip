<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.base.AnnualTypeMapper">
  <resultMap id="BaseResultMap" type="domain.base.AnnualType">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="module" jdbcType="TINYINT" property="module" />
    <result column="year" jdbcType="SMALLINT" property="year" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="attr" jdbcType="VARCHAR" property="attr" />
    <result column="sort_order" jdbcType="INTEGER" property="sortOrder" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, module, year, name, attr, sort_order
  </sql>
  <select id="selectByExample" parameterType="domain.base.AnnualTypeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_annual_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from base_annual_type
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from base_annual_type
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.base.AnnualTypeExample">
    delete from base_annual_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.base.AnnualType">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into base_annual_type (module, year, name, 
      attr, sort_order)
    values (#{module,jdbcType=TINYINT}, #{year,jdbcType=SMALLINT}, #{name,jdbcType=VARCHAR}, 
      #{attr,jdbcType=VARCHAR}, #{sortOrder,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="domain.base.AnnualType">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into base_annual_type
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="module != null">
        module,
      </if>
      <if test="year != null">
        year,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="attr != null">
        attr,
      </if>
      <if test="sortOrder != null">
        sort_order,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="module != null">
        #{module,jdbcType=TINYINT},
      </if>
      <if test="year != null">
        #{year,jdbcType=SMALLINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="attr != null">
        #{attr,jdbcType=VARCHAR},
      </if>
      <if test="sortOrder != null">
        #{sortOrder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.base.AnnualTypeExample" resultType="java.lang.Long">
    select count(*) from base_annual_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update base_annual_type
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.module != null">
        module = #{record.module,jdbcType=TINYINT},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=SMALLINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.attr != null">
        attr = #{record.attr,jdbcType=VARCHAR},
      </if>
      <if test="record.sortOrder != null">
        sort_order = #{record.sortOrder,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update base_annual_type
    set id = #{record.id,jdbcType=INTEGER},
      module = #{record.module,jdbcType=TINYINT},
      year = #{record.year,jdbcType=SMALLINT},
      name = #{record.name,jdbcType=VARCHAR},
      attr = #{record.attr,jdbcType=VARCHAR},
      sort_order = #{record.sortOrder,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.base.AnnualType">
    update base_annual_type
    <set>
      <if test="module != null">
        module = #{module,jdbcType=TINYINT},
      </if>
      <if test="year != null">
        year = #{year,jdbcType=SMALLINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="attr != null">
        attr = #{attr,jdbcType=VARCHAR},
      </if>
      <if test="sortOrder != null">
        sort_order = #{sortOrder,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.base.AnnualType">
    update base_annual_type
    set module = #{module,jdbcType=TINYINT},
      year = #{year,jdbcType=SMALLINT},
      name = #{name,jdbcType=VARCHAR},
      attr = #{attr,jdbcType=VARCHAR},
      sort_order = #{sortOrder,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.base.AnnualTypeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_annual_type
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>