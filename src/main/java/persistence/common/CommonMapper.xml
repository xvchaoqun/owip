<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.common.CommonMapper" >

  <sql id="member_selects_permits">
    <if test="addPermits">
      <if test="adminPartyIdList.size>0 and adminBranchIdList.size>0">
        and (
        party_id in
        <foreach collection="adminPartyIdList" item="partyId"
                 index="index" open="(" close=")" separator=",">
          #{partyId}
        </foreach>
        or
        branch_id in
        <foreach collection="adminBranchIdList" item="branchId"
                 index="index" open="(" close=")" separator=",">
          #{branchId}
        </foreach>
        )
      </if>
      <if test="adminPartyIdList.size>0 and adminBranchIdList.size==0">
        and party_id in
        <foreach collection="adminPartyIdList" item="partyId"
                 index="index" open="(" close=")" separator=",">
          #{partyId}
        </foreach>
      </if>
      <if test="adminPartyIdList.size==0 and adminBranchIdList.size>0">
        and  branch_id in
        <foreach collection="adminBranchIdList" item="branchId"
                 index="index" open="(" close=")" separator=",">
          #{branchId}
        </foreach>
      </if>
    <if test="adminPartyIdList.size==0 and adminBranchIdList.size==0">
        and m.user_id is null
      </if>
    </if>
  </sql>
  <select id="selectMemberList" resultMap="persistence.MemberMapper.BaseResultMap" parameterType="map" >
    select m.* from ow_member m, sys_user user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="status!=null">
      and m.status =#{status}
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by m.grow_time desc
  </select>
  <select id="countMember" parameterType="map" resultType="java.lang.Integer" >
    select count(m.user_id) from ow_member m, sys_user user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="status!=null">
      and m.status =#{status}
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>


  <select id="selectCadreList" resultMap="persistence.CadreMapper.BaseResultMap" parameterType="map" >
    select bc.* from base_cadre bc, sys_user user where bc.user_id= user.id
    <if test="search != null" >
    and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by sort_order desc
  </select>
  <select id="countCadre" parameterType="map" resultType="java.lang.Integer" >
    select count(bc.id) from base_cadre bc, sys_user user where bc.user_id= user.id
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>

  <select id="selectCadreByUnitIdList" resultMap="persistence.CadreMapper.BaseResultMap" parameterType="map" >
    select c.* from base_cadre c, sys_user user where user.id in(
    select c.user_id from base_cadre_main_work cmw, base_cadre c where cmw.unit_id=#{unitId} and cmw.cadre_id = c.id
    union all
    select c.user_id from base_cadre_sub_work csw, base_cadre c where csw.unit_id=#{unitId} and csw.cadre_id = c.id)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and c.user_id = user.id
    order by c.sort_order desc
  </select>
  <select id="countCadreByUnitId" parameterType="map" resultType="java.lang.Integer" >
    select count(c.id) from base_cadre c, sys_user user where user.id in(
    select c.user_id from base_cadre_main_work cmw, base_cadre c where cmw.unit_id=#{unitId} and cmw.cadre_id = c.id
    union all
    select c.user_id from base_cadre_sub_work csw, base_cadre c where csw.unit_id=#{unitId} and csw.cadre_id = c.id)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and c.user_id = user.id
  </select>


  <select id="selectNotCadreList" resultMap="persistence.SysUserMapper.BaseResultMap" parameterType="map" >
    select user.* from sys_user user where user.id not in(select user_id from base_cadre)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by create_time desc
  </select>
  <select id="countNotCadre" parameterType="map" resultType="java.lang.Integer" >
    select count(user.id) from sys_user user where user.id not in(select user_id from base_cadre)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>

  <select id="selectDispatchUnitByCodeList" resultMap="persistence.DispatchUnitMapper.BaseResultMap" parameterType="map" >
    select bdu.* from base_dispatch_unit bdu, base_dispatch d
    where bdu.unit_id=#{unitId} and bdu.dispatch_id=d.id
    <if test="search != null" >
    and d.code like #{search}
    </if>
    order by bdu.sort_order desc
  </select>
  <select id="countDispatchByCodeUnit" parameterType="map" resultType="java.lang.Integer" >
    select count(bdu.id) from base_dispatch_unit bdu, base_dispatch d
    where bdu.unit_id=#{unitId} and bdu.dispatch_id=d.id
    <if test="search != null" >
      and d.code like #{search}
    </if>
  </select>

</mapper>