<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="persistence.common.CommonMapper" >

  <sql id="member_selects_permits">
    <if test="addPermits">
      <if test="adminPartyIdList.size>0 and adminBranchIdList.size>0">
        and (
        party_id in
        <foreach collection="adminPartyIdList" item="partyId"
                 index="index" open="(" close=")" separator=",">
          #{partyId}
        </foreach>
        or
        branch_id in
        <foreach collection="adminBranchIdList" item="branchId"
                 index="index" open="(" close=")" separator=",">
          #{branchId}
        </foreach>
        )
      </if>
      <if test="adminPartyIdList.size>0 and adminBranchIdList.size==0">
        and party_id in
        <foreach collection="adminPartyIdList" item="partyId"
                 index="index" open="(" close=")" separator=",">
          #{partyId}
        </foreach>
      </if>
      <if test="adminPartyIdList.size==0 and adminBranchIdList.size>0">
        and  branch_id in
        <foreach collection="adminBranchIdList" item="branchId"
                 index="index" open="(" close=")" separator=",">
          #{branchId}
        </foreach>
      </if>
    <if test="adminPartyIdList.size==0 and adminBranchIdList.size==0">
        and m.user_id is null
      </if>
    </if>
  </sql>
  <select id="selectMemberList" resultMap="persistence.member.MemberMapper.BaseResultMap" parameterType="map" >
    select m.* from ow_member m, sys_user_view user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="status!=null">
      and m.status =#{status}
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by m.grow_time desc
  </select>
  <select id="countMember" parameterType="map" resultType="java.lang.Integer" >
    select count(m.user_id) from ow_member m, sys_user_view user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="status!=null">
      and m.status =#{status}
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>

  <select id="selectMemberInflowList" resultMap="persistence.member.MemberInflowMapper.BaseResultMap" parameterType="map" >
    select m.* from ow_member_inflow m, sys_user_view user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="inflowStatus!=null">
      and m.inflow_status =#{inflowStatus}
    </if>
    <if test="hasOutApply!=null">
      <if test="hasOutApply">
        and m.out_status in(0,1,2)
      </if>
      <if test="!hasOutApply">
        and (m.out_status is null or m.out_status=-1)
      </if>
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by m.flow_time desc
  </select>
  <select id="countMemberInflow" parameterType="map" resultType="java.lang.Integer" >
    select count(m.user_id) from ow_member_inflow m, sys_user_view user where m.user_id= user.id
    <if test="type!=null">
      and m.type =#{type}
    </if>
    <if test="inflowStatus!=null">
      and m.inflow_status =#{inflowStatus}
    </if>
    <if test="hasOutApply!=null">
      <if test="hasOutApply">
        and m.out_status in(0,1,2)
      </if>
      <if test="!hasOutApply">
        and (m.out_status is null or m.out_status=-1)
      </if>
    </if>
    <include refid="member_selects_permits" />
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>

  <select  id="selectMemberApplyCount" parameterType="map" resultType="bean.MemberApplyCount" >
    select type, stage , count(*) as num from ow_member_apply m where 1=1
    <include refid="member_selects_permits" />
    group by type, stage
  </select>

  <select id="selectCadreList" resultMap="persistence.cadre.CadreMapper.BaseResultMap" parameterType="map" >
    select bc.* from cadre bc, sys_user_view user where bc.user_id= user.id
    <if test="search != null" >
    and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    order by sort_order desc
  </select>
  <select id="countCadre" parameterType="map" resultType="java.lang.Integer" >
    select count(bc.id) from cadre bc, sys_user_view user where bc.user_id= user.id
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
  </select>

  <select id="selectCadreByUnitIdList" resultMap="persistence.cadre.CadreMapper.BaseResultMap" parameterType="map" >
    select c.* from cadre c, sys_user_view user where user.id in(
    select c.user_id from cadre_main_work cmw, cadre c where cmw.unit_id=#{unitId} and cmw.cadre_id = c.id
    union all
    select c.user_id from cadre_sub_work csw, cadre c where csw.unit_id=#{unitId} and csw.cadre_id = c.id)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and c.user_id = user.id
    order by c.sort_order desc
  </select>
  <select id="countCadreByUnitId" parameterType="map" resultType="java.lang.Integer" >
    select count(c.id) from cadre c, sys_user_view user where user.id in(
    select c.user_id from cadre_main_work cmw, cadre c where cmw.unit_id=#{unitId} and cmw.cadre_id = c.id
    union all
    select c.user_id from cadre_sub_work csw, cadre c where csw.unit_id=#{unitId} and csw.cadre_id = c.id)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and c.user_id = user.id
  </select>


  <select id="selectNotCadreList" resultMap="persistence.sys.SysUserViewMapper.BaseResultMap" parameterType="map" >
    select user.* from sys_user_view user where user.id not in(select user_id from cadre)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and user.role_ids not like "%${regRoleStr}%"
    order by create_time desc
  </select>
  <select id="countNotCadre" parameterType="map" resultType="java.lang.Integer" >
    select count(user.id) from sys_user_view user where user.id not in(select user_id from cadre)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and user.role_ids not like "%${regRoleStr}%"
  </select>

  <select id="selectNotMemberList" resultMap="persistence.sys.SysUserViewMapper.BaseResultMap" parameterType="map" >
    select user.* from sys_user_view user where user.id not in(select user_id from ow_member where status=1)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and user.role_ids not like "%${regRoleStr}%"
    order by create_time desc
  </select>
  <select id="countNotMember" parameterType="map" resultType="java.lang.Integer" >
    select count(user.id) from sys_user_view user where user.id not in(select user_id from ow_member  where status=1)
    <if test="search != null" >
      and (user.username like #{search} or user.realname like #{search} or user.code like #{search})
    </if>
    and user.role_ids not like "%${regRoleStr}%"
  </select>

  <select id="selectDispatchUnitByCodeList" resultMap="persistence.dispatch.DispatchUnitMapper.BaseResultMap" parameterType="map" >
    select bdu.* from dispatch_unit bdu, dispatch d
    where bdu.unit_id=#{unitId} and bdu.dispatch_id=d.id
    <if test="search != null" >
    and d.code like #{search}
    </if>
    order by bdu.sort_order desc
  </select>
  <select id="countDispatchByCodeUnit" parameterType="map" resultType="java.lang.Integer" >
    select count(bdu.id) from dispatch_unit bdu, dispatch d
    where bdu.unit_id=#{unitId} and bdu.dispatch_id=d.id
    <if test="search != null" >
      and d.code like #{search}
    </if>
  </select>
  <select id="selectDispatchCadreList" parameterType="map" resultMap="persistence.dispatch.DispatchCadreMapper.BaseResultMap" >
    select distinct dc.* from dispatch_cadre dc, dispatch d, dispatch_type dt
    where dc.dispatch_id=d.id and d.dispatch_type_id=dt.id and dc.cadre_id=#{cadreId}
    <if test="type!=null">
      and dc.type=#{type}
    </if>
    order by d.year desc, dt.sort_order desc, d.code desc, dc.type asc
  </select>

</mapper>