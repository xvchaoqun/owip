<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="persistence.sp.SpRetireMapper">
  <resultMap id="BaseResultMap" type="domain.sp.SpRetire">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="unit_id" jdbcType="INTEGER" property="unitId" />
    <result column="politics_status" jdbcType="INTEGER" property="politicsStatus" />
    <result column="staff_status" jdbcType="VARCHAR" property="staffStatus" />
    <result column="on_job" jdbcType="VARCHAR" property="onJob" />
    <result column="post_class" jdbcType="VARCHAR" property="postClass" />
    <result column="pro_post" jdbcType="VARCHAR" property="proPost" />
    <result column="manage_level" jdbcType="VARCHAR" property="manageLevel" />
    <result column="is_cadre" jdbcType="BIT" property="isCadre" />
    <result column="sort_order" jdbcType="INTEGER" property="sortOrder" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, unit_id, politics_status, staff_status, on_job, post_class, pro_post, 
    manage_level, is_cadre, sort_order, remark
  </sql>
  <select id="selectByExample" parameterType="domain.sp.SpRetireExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sp_retire
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sp_retire
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sp_retire
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="domain.sp.SpRetireExample">
    delete from sp_retire
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="domain.sp.SpRetire">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sp_retire (user_id, unit_id, politics_status, 
      staff_status, on_job, post_class, 
      pro_post, manage_level, is_cadre, 
      sort_order, remark)
    values (#{userId,jdbcType=INTEGER}, #{unitId,jdbcType=INTEGER}, #{politicsStatus,jdbcType=INTEGER}, 
      #{staffStatus,jdbcType=VARCHAR}, #{onJob,jdbcType=VARCHAR}, #{postClass,jdbcType=VARCHAR}, 
      #{proPost,jdbcType=VARCHAR}, #{manageLevel,jdbcType=VARCHAR}, #{isCadre,jdbcType=BIT}, 
      #{sortOrder,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="domain.sp.SpRetire">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sp_retire
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="unitId != null">
        unit_id,
      </if>
      <if test="politicsStatus != null">
        politics_status,
      </if>
      <if test="staffStatus != null">
        staff_status,
      </if>
      <if test="onJob != null">
        on_job,
      </if>
      <if test="postClass != null">
        post_class,
      </if>
      <if test="proPost != null">
        pro_post,
      </if>
      <if test="manageLevel != null">
        manage_level,
      </if>
      <if test="isCadre != null">
        is_cadre,
      </if>
      <if test="sortOrder != null">
        sort_order,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="unitId != null">
        #{unitId,jdbcType=INTEGER},
      </if>
      <if test="politicsStatus != null">
        #{politicsStatus,jdbcType=INTEGER},
      </if>
      <if test="staffStatus != null">
        #{staffStatus,jdbcType=VARCHAR},
      </if>
      <if test="onJob != null">
        #{onJob,jdbcType=VARCHAR},
      </if>
      <if test="postClass != null">
        #{postClass,jdbcType=VARCHAR},
      </if>
      <if test="proPost != null">
        #{proPost,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        #{manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="isCadre != null">
        #{isCadre,jdbcType=BIT},
      </if>
      <if test="sortOrder != null">
        #{sortOrder,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="domain.sp.SpRetireExample" resultType="java.lang.Long">
    select count(*) from sp_retire
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sp_retire
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.unitId != null">
        unit_id = #{record.unitId,jdbcType=INTEGER},
      </if>
      <if test="record.politicsStatus != null">
        politics_status = #{record.politicsStatus,jdbcType=INTEGER},
      </if>
      <if test="record.staffStatus != null">
        staff_status = #{record.staffStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.onJob != null">
        on_job = #{record.onJob,jdbcType=VARCHAR},
      </if>
      <if test="record.postClass != null">
        post_class = #{record.postClass,jdbcType=VARCHAR},
      </if>
      <if test="record.proPost != null">
        pro_post = #{record.proPost,jdbcType=VARCHAR},
      </if>
      <if test="record.manageLevel != null">
        manage_level = #{record.manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.isCadre != null">
        is_cadre = #{record.isCadre,jdbcType=BIT},
      </if>
      <if test="record.sortOrder != null">
        sort_order = #{record.sortOrder,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sp_retire
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      unit_id = #{record.unitId,jdbcType=INTEGER},
      politics_status = #{record.politicsStatus,jdbcType=INTEGER},
      staff_status = #{record.staffStatus,jdbcType=VARCHAR},
      on_job = #{record.onJob,jdbcType=VARCHAR},
      post_class = #{record.postClass,jdbcType=VARCHAR},
      pro_post = #{record.proPost,jdbcType=VARCHAR},
      manage_level = #{record.manageLevel,jdbcType=VARCHAR},
      is_cadre = #{record.isCadre,jdbcType=BIT},
      sort_order = #{record.sortOrder,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="domain.sp.SpRetire">
    update sp_retire
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="unitId != null">
        unit_id = #{unitId,jdbcType=INTEGER},
      </if>
      <if test="politicsStatus != null">
        politics_status = #{politicsStatus,jdbcType=INTEGER},
      </if>
      <if test="staffStatus != null">
        staff_status = #{staffStatus,jdbcType=VARCHAR},
      </if>
      <if test="onJob != null">
        on_job = #{onJob,jdbcType=VARCHAR},
      </if>
      <if test="postClass != null">
        post_class = #{postClass,jdbcType=VARCHAR},
      </if>
      <if test="proPost != null">
        pro_post = #{proPost,jdbcType=VARCHAR},
      </if>
      <if test="manageLevel != null">
        manage_level = #{manageLevel,jdbcType=VARCHAR},
      </if>
      <if test="isCadre != null">
        is_cadre = #{isCadre,jdbcType=BIT},
      </if>
      <if test="sortOrder != null">
        sort_order = #{sortOrder,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.sp.SpRetire">
    update sp_retire
    set user_id = #{userId,jdbcType=INTEGER},
      unit_id = #{unitId,jdbcType=INTEGER},
      politics_status = #{politicsStatus,jdbcType=INTEGER},
      staff_status = #{staffStatus,jdbcType=VARCHAR},
      on_job = #{onJob,jdbcType=VARCHAR},
      post_class = #{postClass,jdbcType=VARCHAR},
      pro_post = #{proPost,jdbcType=VARCHAR},
      manage_level = #{manageLevel,jdbcType=VARCHAR},
      is_cadre = #{isCadre,jdbcType=BIT},
      sort_order = #{sortOrder,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="domain.sp.SpRetireExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sp_retire
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>